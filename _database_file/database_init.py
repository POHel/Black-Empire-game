import sqlite3
from datetime import datetime

class BusinessDatabaseInitializer:
    def __init__(self, db_path="business_empire.db"):
        self.db_path = db_path
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–∏–∑–Ω–µ—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS businesses (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                icon TEXT NOT NULL,
                level INTEGER DEFAULT 1,
                income_per_hour INTEGER DEFAULT 0,
                workers INTEGER DEFAULT 0,
                workload INTEGER DEFAULT 0,
                primary_action TEXT,
                type TEXT CHECK(type IN ('light', 'dark')),
                risk INTEGER DEFAULT 0,
                price INTEGER DEFAULT 0,
                can_go_dark BOOLEAN DEFAULT 0,
                ev_production BOOLEAN DEFAULT 0,
                bio_prosthetics BOOLEAN DEFAULT 0,
                neuro_chips BOOLEAN DEFAULT 0,
                servers INTEGER DEFAULT 0,
                data_center BOOLEAN DEFAULT 0,
                heat_recovery BOOLEAN DEFAULT 0,
                botnet_active BOOLEAN DEFAULT 0,
                trust_level INTEGER DEFAULT 1,
                max_launder_amount INTEGER DEFAULT 50000,
                crypto_reserve_usage REAL DEFAULT 0.1,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–ª–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS business_roles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                business_id INTEGER,
                name TEXT NOT NULL,
                cost INTEGER DEFAULT 0,
                effect TEXT,
                FOREIGN KEY (business_id) REFERENCES businesses (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS special_modes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                business_id INTEGER,
                name TEXT NOT NULL,
                cooldown TEXT,
                cost INTEGER DEFAULT 0,
                effect TEXT,
                FOREIGN KEY (business_id) REFERENCES businesses (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–∏–Ω–µ—Ä–≥–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS business_synergies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                business_id INTEGER,
                synergy_name TEXT NOT NULL,
                FOREIGN KEY (business_id) REFERENCES businesses (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS dark_actions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                business_id INTEGER,
                name TEXT NOT NULL,
                income_multiplier REAL DEFAULT 1.0,
                risk_increase INTEGER DEFAULT 0,
                FOREIGN KEY (business_id) REFERENCES businesses (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —É–ª—É—á—à–µ–Ω–∏–π –±–∏–∑–Ω–µ—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS business_upgrades (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                business_id INTEGER,
                upgrade_type INTEGER,
                level INTEGER DEFAULT 1,
                FOREIGN KEY (business_id) REFERENCES businesses (id),
                UNIQUE(business_id, upgrade_type)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤ –∏–≥—Ä–æ–∫–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS player_businesses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                business_id INTEGER,
                level INTEGER DEFAULT 1,
                income_per_hour INTEGER,
                workers INTEGER,
                workload INTEGER,
                is_active BOOLEAN DEFAULT 1,
                purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (business_id) REFERENCES businesses (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_businesses_type ON businesses(type)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_businesses_price ON businesses(price)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_player_businesses_active ON player_businesses(is_active)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_business_roles_business_id ON business_roles(business_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_special_modes_business_id ON special_modes(business_id)')
        
        conn.commit()
        conn.close()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    def populate_businesses(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∏–∑–Ω–µ—Å–æ–≤ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        tables = ['business_roles', 'special_modes', 'business_synergies', 'dark_actions', 'business_upgrades', 'player_businesses', 'businesses']
        for table in tables:
            try:
                cursor.execute(f"DELETE FROM {table}")
            except sqlite3.Error as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        print("üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
        light_businesses = [
            # (id, name, icon, level, income_per_hour, workers, workload, primary_action, type, risk, price, can_go_dark, 
            #  ev_production, bio_prosthetics, neuro_chips, servers, data_center, heat_recovery, botnet_active, trust_level, max_launder_amount, crypto_reserve_usage, description)
            
            # 1. –ü—Ä–æ–¥–∞–∂–∞ (Retail)
            (1, '–ü—Ä–æ–¥–∞–∂–∞ (Retail)', 'üè™', 1, 5000, 5, 75, '–û—Ç–∫—Ä—ã—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', 'light', 0, 50000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Ç–æ–≤–∞—Ä–∞–º–∏ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è'),
            
            # 2. –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
            (2, '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', 'üèóÔ∏è', 1, 12000, 12, 80, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', 'light', 0, 150000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª—ã—Ö –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤'),
            
            # 3. IT-—Å—Ç–∞—Ä—Ç–∞–ø
            (3, 'IT-—Å—Ç–∞—Ä—Ç–∞–ø', 'üíª', 1, 8000, 3, 60, '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏—á—É', 'light', 0, 75000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö IT-—Ä–µ—à–µ–Ω–∏–π'),
            
            # 4. –≠–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è
            (4, '–≠–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '‚ö°', 1, 18000, 8, 70, '–ü–ª–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 'light', 0, 200000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏'),
            
            # 5. –°–µ—Ç—å –∫–æ—Ñ–µ–µ–Ω
            (5, '–°–µ—Ç—å –∫–æ—Ñ–µ–µ–Ω', '‚òï', 1, 6000, 6, 65, '–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É', 'light', 0, 60000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–°–µ—Ç—å –∫–æ—Ñ–µ–µ–Ω –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞'),
            
            # 6. –ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
            (6, '–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', 'üß¨', 1, 12000, 8, 45, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', 'light', 0, 150000, 1, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'),
            
            # 7. –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            (7, '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', 'üéì', 1, 9000, 5, 55, '–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å', 'light', 0, 100000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–û–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∫—É—Ä—Å—ã'),
            
            # 8. –¢–µ—Ö–Ω–æ–ø–∞—Ä–∫
            (8, '–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫', 'üè≠', 1, 15000, 7, 60, '–ü—Ä–∏–Ω—è—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø', 'light', 0, 180000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π'),
            
            # 9. –ê–≤—Ç–æ–ø—Ä–æ–º
            (9, '–ê–≤—Ç–æ–ø—Ä–æ–º', 'üöó', 1, 20000, 15, 80, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏', 'light', 0, 300000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π'),
            
            # 10. –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            (10, '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'üõ°Ô∏è', 1, 16000, 6, 70, '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'light', 0, 140000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ó–∞—â–∏—Ç–∞ –æ—Ç –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑'),
            
            # 11. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä
            (11, '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä', 'üè•', 1, 14000, 10, 75, '–û—Ç–∫—Ä—ã—Ç—å –æ—Ç–¥–µ–ª', 'light', 0, 160000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞'),
            
            # 12. –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞
            (12, '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', 'ü§ñ', 1, 18000, 10, 70, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Ä–æ–±–æ—Ç–∞', 'light', 0, 250000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º'),
            
            # 13. –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç—É—Ä–∏–∑–º
            (13, '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç—É—Ä–∏–∑–º', 'üöÄ', 1, 35000, 5, 40, '–°—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä–∞–±–ª—å', 'light', 0, 500000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤'),
            
            # 14. AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            (14, 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'üß†', 1, 15000, 6, 65, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏', 'light', 0, 200000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'),
            
            # 15. –ë–∞–Ω–∫
            (15, '–ë–∞–Ω–∫', 'üè¶', 1, 22000, 8, 85, '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç', 'light', 0, 280000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'),
            
            # 16. –ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è
            (16, '–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è', 'üõ¢Ô∏è', 1, 25000, 12, 80, '–ù–∞—á–∞—Ç—å –±—É—Ä–µ–Ω–∏–µ', 'light', 0, 350000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–î–æ–±—ã—á–∞ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ñ—Ç–∏ –∏ –≥–∞–∑–∞'),
            
            # 17. –¢—Ä–µ–π–¥–∏–Ω–≥
            (17, '–¢—Ä–µ–π–¥–∏–Ω–≥', 'üìä', 1, 25000, 4, 90, '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é', 'light', 0, 180000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö'),
            
            # 18. –û–±–æ—Ä–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
            (18, '–û–±–æ—Ä–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', 'ü™ñ', 1, 30000, 10, 70, '–ü–æ–¥–∞—Ç—å –Ω–∞ —Ç–µ–Ω–¥–µ—Ä', 'light', 0, 400000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏'),
            
            # 19. –£–ì–ú–ö
            (19, '–£–ì–ú–ö', '‚õèÔ∏è', 1, 30000, 25, 85, '–û—Ç–∫—Ä—ã—Ç—å —Ä—É–¥–Ω–∏–∫', 'light', 0, 400000, 1, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ì–æ—Ä–Ω–æ–¥–æ–±—ã–≤–∞—é—â–∞—è –∏ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è'),
        ]
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–º–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
        dark_businesses = [
            # 101. –ö–∏–±–µ—Ä-–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
            (101, '–ö–∏–±–µ—Ä-–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', 'üåê', 1, 15000, 4, 85, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', 'dark', 25, 100000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ'),
            
            # 102. –¢–µ–Ω–µ–≤–æ–π –±–∞–Ω–∫–∏–Ω–≥
            (102, '–¢–µ–Ω–µ–≤–æ–π –±–∞–Ω–∫–∏–Ω–≥', 'üí≥', 1, 18000, 5, 75, '–û—Ç–∫—Ä—ã—Ç—å –ø—É–ª', 'dark', 30, 150000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'),
            
            # 103. –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞
            (103, '–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞', 'üì¶', 1, 14000, 6, 80, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é', 'dark', 35, 120000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤'),
            
            # 104. –ü–∏—Ä–∞—Ç—Å–∫–æ–µ –ü–û
            (104, '–ü–∏—Ä–∞—Ç—Å–∫–æ–µ –ü–û', 'üè¥‚Äç‚ò†Ô∏è', 1, 11000, 3, 70, '–í—ã–ø—É—Å—Ç–∏—Ç—å —Ä–µ–ª–∏–∑', 'dark', 20, 90000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –ü–û'),
            
            # 105. –ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            (105, '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏', 'üé≤', 1, 16000, 4, 85, '–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞–≤–∫—É', 'dark', 28, 130000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ü–æ–¥–ø–æ–ª—å–Ω—ã–µ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã'),
            
            # 106. –§–∞–ª—å—à–∏–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            (106, '–§–∞–ª—å—à–∏–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üìÑ', 1, 9000, 4, 65, '–°–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Ç–∏—é', 'dark', 22, 80000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
            
            # 107. –ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç
            (107, '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç', 'üö¢', 1, 17000, 7, 75, '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–π—Å', 'dark', 32, 160000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è'),
            
            # 108. –¢–µ–Ω–µ–≤–æ–π –º–∞–π–Ω–∏–Ω–≥
            (108, '–¢–µ–Ω–µ–≤–æ–π –º–∞–π–Ω–∏–Ω–≥', '‚õèÔ∏è', 1, 12000, 3, 75, '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É', 'dark', 20, 80000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'),
            
            # 109. –ù–∞—Ä–∫–æ–∫–∞—Ä—Ç–µ–ª—å
            (109, '–ù–∞—Ä–∫–æ–∫–∞—Ä—Ç–µ–ª—å', 'üíä', 1, 25000, 8, 90, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'dark', 45, 200000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–π –æ–±–æ—Ä–æ—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤'),
            
            # 110. –û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥
            (110, '–û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥', 'üí∏', 1, 20000, 5, 60, '–û—Ç–º—ã—Ç—å —Å—É–º–º—É', 'dark', 35, 150000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–õ–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤'),
            
            # 111. –ü–æ–¥–ø–æ–ª—å–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥
            (111, '–ü–æ–¥–ø–æ–ª—å–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥', 'üñ•Ô∏è', 1, 13000, 4, 70, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É', 'dark', 18, 110000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —Ö–æ—Å—Ç–∏–Ω–≥-—É—Å–ª—É–≥–∏'),
            
            # 112. –ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥
            (112, '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥', 'üë•', 1, 10000, 6, 80, '–í–∑—è—Ç—å –∑–∞–∫–∞–∑', 'dark', 15, 70000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞'),
            
            # 113. –¢—ë–º–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂
            (113, '–¢—ë–º–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂', 'üîÑ', 1, 19000, 3, 85, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂', 'dark', 25, 170000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'),
            
            # 114. –ß–∞—Å—Ç–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
            (114, '–ß–∞—Å—Ç–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '‚öîÔ∏è', 1, 28000, 12, 90, '–í–∑—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'dark', 40, 300000, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50000, 0.1, '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ –≤–æ–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'),
        ]
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª—ã–µ –±–∏–∑–Ω–µ—Å—ã
        cursor.executemany('''
            INSERT INTO businesses (id, name, icon, level, income_per_hour, workers, workload, 
                                  primary_action, type, risk, price, can_go_dark, ev_production,
                                  bio_prosthetics, neuro_chips, servers, data_center, heat_recovery,
                                  botnet_active, trust_level, max_launder_amount, crypto_reserve_usage, description)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', light_businesses + dark_businesses)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(light_businesses)} —Å–≤–µ—Ç–ª—ã—Ö –∏ {len(dark_businesses)} —Ç–µ–º–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        self._populate_roles(cursor)
        self._populate_special_modes(cursor)
        self._populate_synergies(cursor)
        self._populate_dark_actions(cursor)
        self._populate_upgrades(cursor)
        
        conn.commit()
        conn.close()
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    
    def _populate_roles(self, cursor):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–æ–ª–µ–π"""
        roles_data = [
            # –ü—Ä–æ–¥–∞–∂–∞ (Retail)
            (1, '–ü—Ä–æ–¥–∞–≤–µ—Ü', 1000, '+10% –¥–æ—Ö–æ–¥'),
            (1, '–ú–µ–Ω–µ–¥–∂–µ—Ä', 3000, '+25% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
            (1, 'Merchandiser', 2000, '+15% –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'),
            
            # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
            (2, '–ë—Ä–∏–≥–∞–¥–∏—Ä', 8000, '+20% —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'),
            (2, '–ò–Ω–∂–µ–Ω–µ—Ä', 12000, '+25% –∫–∞—á–µ—Å—Ç–≤–æ'),
            (2, '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', 15000, '+30% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
            
            # IT-—Å—Ç–∞—Ä—Ç–∞–ø
            (3, 'Junior Dev', 2000, '+5% —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'),
            (3, 'Senior Dev', 5000, '+20% –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞'),
            (3, 'PM', 4000, '+15% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã'),
            (3, 'Growth Hacker', 4500, '+25% –ø—Ä–∏—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
            
            # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
        ]
        
        cursor.executemany('''
            INSERT INTO business_roles (business_id, name, cost, effect)
            VALUES (?, ?, ?, ?)
        ''', roles_data)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(roles_data)} —Ä–æ–ª–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–æ–≤")
    
    def _populate_special_modes(self, cursor):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        special_modes_data = [
            # –ü—Ä–æ–¥–∞–∂–∞ (Retail)
            (1, '–ú–∞—Ä–∫–µ—Ç-–∫–∞–º–ø–∞–Ω–∏—è', '6—á', 15000, '+200% —Å–ø—Ä–æ—Å –Ω–∞ 1—á'),
            (1, '–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏', '24—á', 25000, '+10% –º–∞—Ä–∂–∞'),
            
            # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
            (2, '–≠–∫—Å–ø—Ä–µ—Å—Å-–ª–∞–≥', '24—á', 40000, '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ 50%'),
            (2, '–õ–æ–±–±–∏—Ä–æ–≤–∞–Ω–∏–µ', '48—á', 30000, '–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π'),
            
            # IT-—Å—Ç–∞—Ä—Ç–∞–ø
            (3, '–ò–Ω–≤–µ—Å—Ç-—Ä–∞—É–Ω–¥', '12—á', 30000, '+50000 –∫–∞–ø–∏—Ç–∞–ª–∞'),
            (3, '–ë–µ—Ç–∞-—Ç–µ—Å—Ç', '8—á', 10000, '–®–∞–Ω—Å –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞'),
            
            # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
        ]
        
        cursor.executemany('''
            INSERT INTO special_modes (business_id, name, cooldown, cost, effect)
            VALUES (?, ?, ?, ?, ?)
        ''', special_modes_data)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(special_modes_data)} —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤")
    
    def _populate_synergies(self, cursor):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–µ—Ä–≥–∏–π"""
        synergies_data = [
            (1, 'IT-—Å—Ç–∞—Ä—Ç–∞–ø'),
            (1, '–õ–æ–≥–∏—Å—Ç–∏–∫–∞'),
            (2, '–£–ì–ú–ö'),
            (2, '–≠–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'),
            (3, 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'),
            (3, '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
            # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–Ω–µ—Ä–≥–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
        ]
        
        cursor.executemany('''
            INSERT INTO business_synergies (business_id, synergy_name)
            VALUES (?, ?)
        ''', synergies_data)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(synergies_data)} —Å–∏–Ω–µ—Ä–≥–∏–π")
    
    def _populate_dark_actions(self, cursor):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        dark_actions_data = [
            (6, '–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è', 2.0, 25),
            (6, '–ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∏–º–ø–ª–∞–Ω—Ç–æ–≤', 3.0, 40),
            (19, '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç', 2.5, 30),
            (19, '–°—Ö–µ–º—ã —É–∫–ª–æ–Ω–µ–Ω–∏—è', 1.8, 20),
        ]
        
        cursor.executemany('''
            INSERT INTO dark_actions (business_id, name, income_multiplier, risk_increase)
            VALUES (?, ?, ?, ?)
        ''', dark_actions_data)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(dark_actions_data)} —Ç–µ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
    
    def _populate_upgrades(self, cursor):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–ª—É—á—à–µ–Ω–∏–π"""
        upgrades_data = []
        business_ids = list(range(1, 20)) + list(range(101, 115))  # –í—Å–µ ID –±–∏–∑–Ω–µ—Å–æ–≤
        
        for business_id in business_ids:
            for upgrade_type in range(1, 6):  # 5 —Ç–∏–ø–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π
                upgrades_data.append((business_id, upgrade_type, 1))
        
        cursor.executemany('''
            INSERT INTO business_upgrades (business_id, upgrade_type, level)
            VALUES (?, ?, ?)
        ''', upgrades_data)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(upgrades_data)} –∑–∞–ø–∏—Å–µ–π —É–ª—É—á—à–µ–Ω–∏–π")
    
    def verify_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        tables = ['businesses', 'business_roles', 'special_modes', 'business_synergies', 'dark_actions', 'business_upgrades']
        
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤...")
    
    initializer = BusinessDatabaseInitializer()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
        initializer.init_database()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        initializer.populate_businesses()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        initializer.verify_data()
        
        print("\nüéä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: business_empire.db")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    main()