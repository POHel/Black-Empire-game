import sys
import math
import random
import time
import json
import sqlite3
from dataclasses import dataclass
from enum import Enum
from typing import List, Dict, Optional, Tuple
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QPushButton, QLabel, QStackedWidget, QFrame, QScrollArea, 
    QGridLayout, QLineEdit, QSlider, QComboBox, QProgressBar,
    QGroupBox, QTabWidget, QTextEdit, QListWidget, QListWidgetItem,
    QDialog, QMessageBox, QSplitter, QToolBar, QStatusBar,
    QSizePolicy, QSpacerItem, QButtonGroup, QRadioButton,
    QCheckBox, QDoubleSpinBox, QSpinBox, QFormLayout
)
from PyQt6.QtCore import (
    Qt, QTimer, pyqtSignal, QPropertyAnimation, QEasingCurve, 
    QRect, QPoint, QSize, QDateTime, QSequentialAnimationGroup,
    QParallelAnimationGroup, qInstallMessageHandler
)
from PyQt6.QtGui import (
    QFont, QPalette, QColor, QPainter, QLinearGradient, 
    QRadialGradient, QPen, QBrush, QFontDatabase, QPixmap,
    QIcon, QMovie, QKeyEvent
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
GAME_VERSION = "0.0.1"
SCREEN_WIDTH = 1920
SCREEN_HEIGHT = 1080

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
WHITE = QColor(255, 255, 255)
BLACK = QColor(0, 0, 0)
DARK_BG = QColor(5, 5, 20)
PANEL_BG = QColor(15, 15, 40)
DEEP_PURPLE = QColor(55, 0, 110)
PURPLE_PRIMARY = QColor(120, 20, 220)
PURPLE_ACCENT = QColor(160, 60, 255)
LIGHT_PURPLE = QColor(180, 120, 240)
BAR_BASE = QColor(90, 30, 180)
BAR_HIGHLIGHT = QColor(140, 80, 230)
TEXT_PRIMARY = QColor(245, 245, 255)
TEXT_SECONDARY = QColor(180, 180, 200)
TEXT_TERTIARY = QColor(140, 140, 160)
CARD_BG = QColor(11, 17, 23)
ACCENT1 = QColor(106, 44, 255)
ACCENT2 = QColor(20, 231, 209)
TEXT_MUTED = QColor(159, 176, 195)

class ScreenState(Enum):
    LOADING = 0
    MAIN_MENU = 1
    CLICKER = 2
    INVESTMENTS = 3
    SHOP_SELECTION = 4
    LIGHT_SHOP = 5
    BUSINESS_MENU = 6
    PROFILE_MENU = 7
    SETTINGS_MENU = 8

class GameConfig:
    def __init__(self):
        self.screen_width = 1920
        self.screen_height = 1080
        self.button_height = 70
        self.font_sizes = {
            "small": 14,
            "medium": 18,
            "large": 24,
            "xlarge": 32,
            "title": 36
        }

# –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ª–æ–≥–∏–∫–∏
class Settings:
    def __init__(self):
        pass
    
    def show_themes(self):
        return ["–¢–µ–º–Ω–∞—è", "–°–≤–µ—Ç–ª–∞—è", "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è"]
    
    def show_window_sizes(self):
        return [(1280, 720), (1450, 830), (1920, 1080)]
    
    def show_fps(self):
        return [30, 60, 120]
    
    def show_langs(self):
        return ["–†—É—Å—Å–∫–∏–π", "English", "Deutsch"]
    
    def get_current_theme(self):
        return "–¢–µ–º–Ω–∞—è"
    
    def get_current_window_size(self):
        return (1450, 830)
    
    def get_current_fps(self):
        return 60
    
    def get_current_lang(self):
        return "–†—É—Å—Å–∫–∏–π"
    
    def set_current_theme(self, theme):
        pass
    
    def set_current_fps(self, fps):
        pass
    
    def set_current_lang(self, lang):
        pass

class ExportDB:
    def __init__(self):
        pass
    
    def get_bag(self):
        return (1000000, 5, 5000, 15, 2000, 30000)
    
    def get_actives(self):
        return ["–ê–∫—Ü–∏—è A", "–ê–∫—Ü–∏—è B", "–ê–∫—Ü–∏—è C"]
    
    def get_homes(self):
        return ["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–î–æ–º", "–í–∏–ª–ª–∞"]
    
    def get_crypto(self):
        return ["Bitcoin", "Ethereum", "Dogecoin"]
    
    def balance(self):
        return 1500000
    
    def get_shop_islands(self):
        return (1, "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤", 5000000, "–†–∞–π—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤ –≤ –æ–∫–µ–∞–Ω–µ")
    
    def get_shop_boosters(self):
        return (1, "–ë—É—Å—Ç–µ—Ä –¥–æ—Ö–æ–¥–∞", 5000, "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –Ω–∞ 24 —á–∞—Å–∞")
    
    def get_shop_nft(self):
        return (1, "–†–µ–¥–∫–æ–µ NFT", 25000, "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤")
    
    def get_shop_cars(self):
        return (1, "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", 120000, "–ë—ã—Å—Ç—Ä–∞—è –∏ —Å—Ç–∏–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", 320)
    
    def get_shop_u_items(self):
        return (1, "–ó–æ–ª–æ—Ç–æ–π —Å–ª–∏—Ç–æ–∫", 50000, "–¶–µ–Ω–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤")
    
    def get_shop_yachts(self):
        return (1, "–†–æ—Å–∫–æ—à–Ω–∞—è —è—Ö—Ç–∞", 2000000, "–Ø—Ö—Ç–∞ –∫–ª–∞—Å—Å–∞ –ª—é–∫—Å")
    
    def get_shop_planes(self):
        return (1, "–ß–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª–µ—Ç", 5000000, "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤–∏–∞—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    
    def get_shop_jewelry(self):
        return (1, "–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–æ–µ –∫–æ–ª—å–µ", 150000, "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ")

class UpdateDB:
    def __init__(self):
        pass

class AnimatedButton(QPushButton):
    """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    
    def __init__(self, text, icon=None, parent=None):
        super().__init__(text, parent)
        self.setFixedHeight(50)
        
        self.setStyleSheet(self.get_normal_style())
        
    def get_normal_style(self):
        return f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {DEEP_PURPLE.name()}, stop:1 {PURPLE_PRIMARY.name()});
                border: 2px solid {PURPLE_ACCENT.name()};
                border-radius: 15px;
                color: {TEXT_PRIMARY.name()};
                font-size: 16px;
                font-weight: bold;
                padding: 10px 20px;
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {PURPLE_PRIMARY.name()}, stop:1 {PURPLE_ACCENT.name()});
                border: 2px solid {LIGHT_PURPLE.name()};
            }}
            QPushButton:pressed {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {DEEP_PURPLE.name()}, stop:1 {PURPLE_PRIMARY.name()});
            }}
        """
    
    def enterEvent(self, event):
        self.animate_hover()
        super().enterEvent(event)
    
    def leaveEvent(self, a0):
        self.animate_leave()
        super().leaveEvent(a0)
    
    def animate_hover(self):
        anim = QPropertyAnimation(self, b"geometry")
        anim.setDuration(200)
        anim.setStartValue(self.geometry())
        anim.setEndValue(QRect(self.x()-2, self.y()-2, self.width()+4, self.height()+4))
        anim.start()
    
    def animate_leave(self):
        anim = QPropertyAnimation(self, b"geometry")
        anim.setDuration(200)
        anim.setStartValue(self.geometry())
        anim.setEndValue(QRect(self.x()+2, self.y()+2, self.width()-4, self.height()-4))
        anim.start()

class MenuButton(AnimatedButton):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.setFixedSize(300, 70)
        self.setStyleSheet(self.get_menu_style())
        
    def get_menu_style(self):
        return f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {PURPLE_PRIMARY.name()}, stop:1 {DEEP_PURPLE.name()});
                border: 3px solid {PURPLE_ACCENT.name()};
                border-radius: 35px;
                color: {TEXT_PRIMARY.name()};
                font-size: 20px;
                font-weight: bold;
                padding: 15px 30px;
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {PURPLE_ACCENT.name()}, stop:1 {PURPLE_PRIMARY.name()});
                border: 3px solid {LIGHT_PURPLE.name()};
            }}
            QPushButton:pressed {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {DEEP_PURPLE.name()}, stop:1 {PURPLE_PRIMARY.name()});
            }}
        """

class NavigationButton(AnimatedButton):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    
    def __init__(self, text, icon_name, parent=None):
        super().__init__(text, parent)
        self.icon_name = icon_name
        self.setFixedSize(180, 60)
        self.setCheckable(True)
        
    def get_icon_style(self):
        icons = {
            "clicker": "üéÆ",
            "shop": "üè™", 
            "investments": "üìà",
            "business": "üè¢",
            "profile": "üë§",
            "settings": "‚öôÔ∏è"
        }
        return icons.get(self.icon_name, "‚óè")

class GradientWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º –∏ –ø–∞–¥–∞—é—â–∏–º–∏ –∑–≤–µ–∑–¥–∞–º–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.stars = []
        self.animation_timer = QTimer()
        self.animation_timer.timeout.connect(self.update_stars)
        self.animation_timer.start(50)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50ms
        
        self.init_stars()
        
    def init_stars(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–µ–∑–¥"""
        for _ in range(100):  # –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
            star = {
                'x': random.randint(0, self.width()),
                'y': random.randint(0, self.height()),
                'size': random.uniform(0.5, 3),
                'speed': random.uniform(0.1, 2),
                'alpha': random.randint(50, 255),
                'twinkle_speed': random.uniform(0.02, 0.1),
                'twinkle_direction': 1
            }
            self.stars.append(star)
    
    def update_stars(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–≤–µ–∑–¥"""
        for star in self.stars:
            # –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
            star['y'] += star['speed']
            
            # –ú–µ—Ä—Ü–∞–Ω–∏–µ
            star['alpha'] += star['twinkle_speed'] * star['twinkle_direction']
            if star['alpha'] >= 255:
                star['alpha'] = 255
                star['twinkle_direction'] = -1
            elif star['alpha'] <= 50:
                star['alpha'] = 50
                star['twinkle_direction'] = 1
            
            # –ï—Å–ª–∏ –∑–≤–µ–∑–¥–∞ —É—à–ª–∞ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—Ä—Ö—É
            if star['y'] > self.height():
                star['y'] = 0
                star['x'] = random.randint(0, self.width())
        
        self.update()
    
    def resizeEvent(self, a0):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        super().resizeEvent(a0)
        self.stars.clear()
        self.init_stars()
    
    def paintEvent(self, a0):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        gradient = QLinearGradient(0, 0, self.width(), self.height())
        gradient.setColorAt(0, QColor(2, 2, 15))  # –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Å–∏–Ω–∏–π
        gradient.setColorAt(0.3, QColor(8, 8, 40))  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
        gradient.setColorAt(0.7, QColor(15, 5, 35))  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
        gradient.setColorAt(1, QColor(2, 2, 15))  # –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Å–∏–Ω–∏–π
        
        painter.fillRect(self.rect(), gradient)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—å/–Ω–µ–±—É–ª—è—Ä–Ω–æ—Å—Ç—å
        self.draw_nebula(painter)
        
        # –†–∏—Å—É–µ–º –∑–≤–µ–∑–¥—ã
        self.draw_stars(painter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö –¥–ª—è –≥–ª—É–±–∏–Ω—ã
        overlay_gradient = QLinearGradient(0, 0, 0, self.height())
        overlay_gradient.setColorAt(0, QColor(0, 0, 0, 80))
        overlay_gradient.setColorAt(1, QColor(80, 20, 120, 40))
        painter.fillRect(self.rect(), overlay_gradient)
    
    def draw_nebula(self, painter):
        """–†–∏—Å—É–µ—Ç —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–ª—É–±–∏–Ω—ã"""
        # –ë–æ–ª—å—à–∞—è —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ
        radial = QRadialGradient(self.width() // 2, self.height() // 2, self.width() // 2)
        radial.setColorAt(0, QColor(30, 10, 60, 30))
        radial.setColorAt(0.7, QColor(10, 5, 30, 10))
        radial.setColorAt(1, QColor(0, 0, 0, 0))
        painter.fillRect(self.rect(), radial)
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–µ–π
        nebulae = [
            (self.width() // 4, self.height() // 3, 200, QColor(40, 20, 80, 40)),
            (self.width() * 3 // 4, self.height() * 2 // 3, 150, QColor(60, 10, 40, 30)),
            (self.width() // 5, self.height() * 4 // 5, 180, QColor(20, 30, 70, 35))
        ]
        
        for x, y, radius, color in nebulae:
            radial = QRadialGradient(x, y, radius)
            radial.setColorAt(0, color)
            radial.setColorAt(1, QColor(0, 0, 0, 0))
            painter.fillRect(self.rect(), radial)
    
    def draw_stars(self, painter):
        """–†–∏—Å—É–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã"""
        for star in self.stars:
            star_color = QColor(255, 255, 255, int(star['alpha']))
            painter.setPen(QPen(star_color, star['size']))
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–≤–µ–∑–¥—ã
            painter.drawPoint(int(star['x']), int(star['y']))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–≤–µ–∑–¥
            if star['size'] > 1.5:
                glow_color = QColor(255, 255, 255, int(star['alpha'] * 0.3))
                painter.setPen(QPen(glow_color, star['size'] * 2))
                painter.drawPoint(int(star['x']), int(star['y']))

class MainMenuScreen(QWidget):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã"""
    
    playClicked = pyqtSignal()
    settingsClicked = pyqtSignal()
    exitClicked = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –§–æ–Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        background = GradientWidget(self)
        layout.addWidget(background)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
        content_layout = QVBoxLayout()
        content_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        content_layout.setSpacing(40)
        content_layout.setContentsMargins(100, 100, 100, 100)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QVBoxLayout()
        header_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        header_layout.setSpacing(10)
        
        # –õ–æ–≥–æ—Ç–∏–ø SKATT x R3DAX
        logo_label = QLabel("SKATT x R3DAX")
        logo_label.setStyleSheet(f"""
            color: {ACCENT2.name()};
            font-size: 36px;
            font-weight: bold;
            font-family: 'Arial';
            letter-spacing: 3px;
        """)
        header_layout.addWidget(logo_label)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        title_label = QLabel("Black Empire")
        title_label.setStyleSheet(f"""
            color: {TEXT_PRIMARY.name()};
            font-size: 72px;
            font-weight: bold;
            font-family: 'Arial';
            margin: 20px 0;
            
        """)
        #text-shadow: 0 0 20px var{PURPLE_ACCENT.name()};
        header_layout.addWidget(title_label)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
        desc_label = QLabel("–ü–æ—Å—Ç—Ä–æ–π –∏–º–ø–µ—Ä–∏—é –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –¥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏")
        desc_label.setStyleSheet(f"""
            color: {TEXT_SECONDARY.name()};
            font-size: 24px;
            font-weight: normal;
            font-family: 'Arial';
            text-align: center;
        """)
        desc_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        desc_label.setWordWrap(True)
        header_layout.addWidget(desc_label)
        
        content_layout.addLayout(header_layout)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        line = QFrame()
        line.setFrameShape(QFrame.Shape.HLine)
        line.setFrameShadow(QFrame.Shadow.Sunken)
        line.setStyleSheet(f"""
            background-color: {PURPLE_PRIMARY.name()};
            color: {PURPLE_PRIMARY.name()};
            min-height: 2px;
            max-height: 2px;
            margin: 40px 100px;
        """)
        content_layout.addWidget(line)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –≥–µ–π–º–ø–ª–µ—è
        gameplay_desc = QLabel("""–°—Ç–∞—Ä—Ç—É–π –º–∞–ª–µ–Ω—å–∫–∏–º –±–∏–∑–Ω–µ—Å–æ–º: –∑–∞–∫—É–ø–∏ —Å—ã—Ä—å–µ, —É–ø—Ä–∞–≤–ª—è–π –∞–∫—Ç–∏–≤–∞–º–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ —É–ª—É—á—à–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ü—Ä–æ–π–¥–∏ ‚Äî —ç—Ç–æ –≤—ã–∑–æ–≤ ‚Äî —Å—Ç–∞—Ä—Ç.""")
        gameplay_desc.setStyleSheet(f"""
            color: {TEXT_SECONDARY.name()};
            font-size: 18px;
            font-weight: normal;
            font-family: 'Arial';
            text-align: center;
            line-height: 1.5;
        """)
        gameplay_desc.setAlignment(Qt.AlignmentFlag.AlignCenter)
        gameplay_desc.setWordWrap(True)
        gameplay_desc.setMaximumWidth(800)
        content_layout.addWidget(gameplay_desc)
        
        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        buttons_layout = QVBoxLayout()
        buttons_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        buttons_layout.setSpacing(20)
        
        # –ö–Ω–æ–ø–∫–∞ –ò–≥—Ä–∞—Ç—å
        play_btn = MenuButton("üéÆ –ò–≥—Ä–∞—Ç—å")
        play_btn.setFixedSize(350, 80)
        play_btn.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {ACCENT2.name()}, stop:1 {ACCENT1.name()});
                border: 3px solid {LIGHT_PURPLE.name()};
                border-radius: 40px;
                color: {DARK_BG.name()};
                font-size: 24px;
                font-weight: bold;
                padding: 20px 40px;
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {ACCENT1.name()}, stop:1 {ACCENT2.name()});
                border: 3px solid {WHITE.name()};
            }}
        """)
        play_btn.clicked.connect(self.playClicked.emit)
        buttons_layout.addWidget(play_btn)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        menu_buttons = [
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.settingsClicked),
            ("üö™ –í—ã—Ö–æ–¥", self.exitClicked)
        ]
        
        for text, signal in menu_buttons:
            btn = MenuButton(text)
            btn.clicked.connect(signal.emit)
            buttons_layout.addWidget(btn)
        
        content_layout.addLayout(buttons_layout)
        
        # –§—É—Ç–µ—Ä —Å –≤–µ—Ä—Å–∏–µ–π
        footer_label = QLabel(f"Version {GAME_VERSION}")
        footer_label.setStyleSheet(f"""
            color: {TEXT_TERTIARY.name()};
            font-size: 14px;
            font-family: 'Arial';
            margin-top: 50px;
        """)
        footer_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        content_layout.addWidget(footer_label)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –¥–ª—è background
        background_layout = QVBoxLayout()
        background_layout.addLayout(content_layout)
        background.setLayout(background_layout)

        self.setLayout(layout)

class LoadingScreen(QWidget):
    """–≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    
    loadingFinished = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.progress = 0
        self.dots = 0
        self.rotation_angle = 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        self.animation_timer = QTimer()
        self.animation_timer.timeout.connect(self.update_animations)
        self.animation_timer.start(30)  # 30 FPS –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        
    def update_animations(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π"""
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        if self.progress < 100:
            self.progress += 2 # –ó–∞–º–µ–¥–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        else:
            self.animation_timer.stop()
            self.loadingFinished.emit()
        
        # –í—Ä–∞—â–µ–Ω–∏–µ
        self.rotation_angle = (self.rotation_angle + 3) % 360
        
        # –ú–µ—Ä—Ü–∞–Ω–∏–µ —Ç–æ—á–µ–∫
        self.dots = (self.dots + 1) % 4
        
        self.update()
    
    def paintEvent(self, a0):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        # –§–æ–Ω –∫–∞–∫ –≤ GradientWidget
        gradient = QLinearGradient(0, 0, self.width(), self.height())
        gradient.setColorAt(0, QColor(2, 2, 15))
        gradient.setColorAt(0.3, QColor(8, 8, 40))
        gradient.setColorAt(0.7, QColor(15, 5, 35))
        gradient.setColorAt(1, QColor(2, 2, 15))
        painter.fillRect(self.rect(), gradient)
        
        # –í—Ä–∞—â–∞—é—â–∏–π—Å—è –ª–æ–≥–æ—Ç–∏–ø
        painter.save()
        painter.translate(self.width() // 2, self.height() // 2 - 100)
        painter.rotate(self.rotation_angle)
        
        # –ö—Ä—É–≥ –ª–æ–≥–æ—Ç–∏–ø–∞
        gradient = QRadialGradient(0, 0, 60)
        gradient.setColorAt(0, PURPLE_PRIMARY)
        gradient.setColorAt(1, DEEP_PURPLE)
        painter.setBrush(QBrush(gradient))
        painter.setPen(QPen(PURPLE_ACCENT, 3))
        painter.drawEllipse(-60, -60, 120, 120)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥
        gradient_inner = QRadialGradient(0, 0, 30)
        gradient_inner.setColorAt(0, LIGHT_PURPLE)
        gradient_inner.setColorAt(1, PURPLE_PRIMARY)
        painter.setBrush(QBrush(gradient_inner))
        painter.drawEllipse(-30, -30, 60, 60)
        
        painter.restore()
        
        painter.setPen(QPen(TEXT_PRIMARY))
        font = QFont("Arial", 24, QFont.Weight.Bold)
        painter.setFont(font)

        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        base_text = "–ó–∞–≥—Ä—É–∑–∫–∞..."
        text_width = painter.fontMetrics().horizontalAdvance(base_text)
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        text_x = (self.width() - text_width) // 2
        text_y = self.height() // 2 + 10
        
        # –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –¥–µ—Ä–≥–∞–Ω–∏—è)
        loading_texts = ["–ó–∞–≥—Ä—É–∑–∫–∞", "–ó–∞–≥—Ä—É–∑–∫–∞.", "–ó–∞–≥—Ä—É–∑–∫–∞..", "–ó–∞–≥—Ä—É–∑–∫–∞...", "–ó–∞–≥—Ä—É–∑–∫–∞..."]
        current_text = loading_texts[self.dots]
        
        painter.drawText(text_x, text_y, current_text)

        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        # loading_rect = QRect(0, self.height() // 2 - 20, self.width(), 60)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
        # painter.drawText(loading_rect, Qt.AlignmentFlag.AlignCenter, current_text)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_width = 500
        bar_height = 25
        bar_x = (self.width() - bar_width) // 2
        bar_y = self.height() // 2 + 50
        
        # –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        painter.setBrush(QBrush(DEEP_PURPLE))
        painter.setPen(QPen(PURPLE_PRIMARY, 2))
        painter.drawRoundedRect(bar_x, bar_y, bar_width, bar_height, 12, 12)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        fill_width = int(bar_width * self.progress / 100)
        if fill_width > 0:
            gradient = QLinearGradient(bar_x, bar_y, bar_x + fill_width, bar_y + bar_height)
            gradient.setColorAt(0, PURPLE_PRIMARY)
            gradient.setColorAt(1, PURPLE_ACCENT)
            painter.setBrush(QBrush(gradient))
            painter.drawRoundedRect(bar_x, bar_y, fill_width, bar_height, 12, 12)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç
        painter.setPen(QPen(TEXT_SECONDARY))
        painter.setFont(QFont("Arial", 14))
        percent_text = f"{self.progress}%"
        painter.drawText(bar_x, bar_y + bar_height + 30, bar_width, 30, 
                        Qt.AlignmentFlag.AlignCenter, percent_text)

class NavigationPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    navigationChanged = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.setFixedWidth(200)
        self.setStyleSheet(f"background-color: {PANEL_BG.name()}; border-radius: 10px;")
        
        self.button_group = QButtonGroup()
        self.button_group.setExclusive(True)
        
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(10, 20, 10, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("Black Empire")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 18px; font-weight: bold; text-align: center;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        layout.addSpacing(20)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_items = [
            ("üéÆ –ö–ª–∏–∫–µ—Ä", "clicker"),
            ("üè™ –ú–∞–≥–∞–∑–∏–Ω—ã", "shops"),
            ("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "investments"), 
            ("üè¢ –ë–∏–∑–Ω–µ—Å—ã", "businesses"),
            ("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile")
        ]
        
        self.buttons = {}
        
        for text, action in nav_items:
            btn = NavigationButton(text, action.split(':')[0] if ':' in text else text.lower())
            btn.setChecked(action == "clicker")
            btn.clicked.connect(lambda checked, a=action: self.navigationChanged.emit(a))
            self.button_group.addButton(btn)
            self.buttons[action] = btn
            layout.addWidget(btn)
        
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_btn = NavigationButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
        settings_btn.clicked.connect(lambda: self.navigationChanged.emit("settings"))
        self.button_group.addButton(settings_btn)
        self.buttons["settings"] = settings_btn
        layout.addWidget(settings_btn)
        
        # –í–µ—Ä—Å–∏—è –∏–≥—Ä—ã
        version_label = QLabel(f"v{GAME_VERSION}")
        version_label.setStyleSheet(f"color: {TEXT_TERTIARY.name()}; font-size: 12px; text-align: center;")
        version_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(version_label)
        
        self.setLayout(layout)
    
    def set_active_button(self, action):
        if action in self.buttons:
            self.buttons[action].setChecked(True)

class ClickerGame(QWidget):
    """–ò–≥—Ä–æ–≤–æ–π –∫–ª–∏–∫–µ—Ä"""
    
    moneyChanged = pyqtSignal(int)
    exitToMenu = pyqtSignal()
    navigationRequested = pyqtSignal(str)  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    
    def __init__(self):
        super().__init__()
        self.money = 0
        self.per_click = 1
        self.total_clicks = 0
        self.config = GameConfig()
        
        self.init_ui()
        
    def init_ui(self):
        main_layout = QHBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        left_panel = QFrame()
        left_panel.setStyleSheet(f"""
            QFrame {{
                background-color: {PANEL_BG.name()};
                border-radius: 15px;
                border: 2px solid {PURPLE_PRIMARY.name()};
            }}
        """)
        left_panel.setFixedWidth(300)
        
        left_layout = QVBoxLayout()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_group.setStyleSheet(f"""
            QGroupBox {{
                color: {TEXT_PRIMARY.name()};
                font-size: 16px;
                font-weight: bold;
                border: 2px solid {PURPLE_ACCENT.name()};
                border-radius: 10px;
                margin-top: 10px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }}
        """)
        
        stats_layout = QVBoxLayout()
        
        self.money_label = QLabel("–ö–∞–ø–∏—Ç–∞–ª: $0")
        self.per_click_label = QLabel("–î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫: $1")
        self.clicks_label = QLabel("–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: 0")
        
        for label in [self.money_label, self.per_click_label, self.clicks_label]:
            label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 14px; padding: 5px;")
            stats_layout.addWidget(label)
        
        stats_group.setLayout(stats_layout)
        left_layout.addWidget(stats_group)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–ª–∏–∫–µ—Ä–µ
        nav_group = QGroupBox("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        nav_group.setStyleSheet(stats_group.styleSheet())
        
        nav_layout = QVBoxLayout()
        
        nav_buttons = [
            ("üè™ –ú–∞–≥–∞–∑–∏–Ω—ã", self.show_shops),
            ("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", self.show_investments),
            ("üè¢ –ë–∏–∑–Ω–µ—Å—ã", self.show_businesses),
            ("üë§ –ü—Ä–æ—Ñ–∏–ª—å", self.show_profile),
            ("üö™ –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", self.exit_to_menu)
        ]
        
        for text, callback in nav_buttons:
            btn = AnimatedButton(text)
            btn.clicked.connect(callback)
            nav_layout.addWidget(btn)
        
        nav_group.setLayout(nav_layout)
        left_layout.addWidget(nav_group)
        
        left_layout.addStretch()
        left_panel.setLayout(left_layout)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –∏–≥—Ä–∞
        center_panel = QWidget()
        center_layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ö–ª–∏–∫–µ—Ä")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 32px; font-weight: bold;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        center_layout.addWidget(title)
        
        center_layout.addSpacing(30)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–ª–∏–∫–∞
        self.click_button = AnimatedButton("üí∞–ö–õ–ò–ö! ")
        self.click_button.setFixedSize(500, 500)
        self.click_button.setStyleSheet("""
            QPushButton {
                background: qradialgradient(cx:0.5, cy:0.5, radius:0.8,
                    stop:0 #7828c8, stop:1 #371e72);
                border: 4px solid #8b5cf6;
                border-radius: 250px;
                color: white;
                font-size: 70px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: qradialgradient(cx:0.5, cy:0.5, radius:0.8,
                    stop:0 #9333ea, stop:1 #482880);
                border: 4px solid #a78bfa;
            }
        """)
        self.click_button.clicked.connect(self.handle_click)
        center_layout.addWidget(self.click_button, alignment=Qt.AlignmentFlag.AlignCenter)
        
        center_layout.addSpacing(20)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = QLabel("–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–†–û–ë–ï–õ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞\nESC - –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é")
        instruction.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
        instruction.setAlignment(Qt.AlignmentFlag.AlignCenter)
        center_layout.addWidget(instruction)
        
        center_layout.addStretch()
        center_panel.setLayout(center_layout)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ª—É—á—à–µ–Ω–∏—è
        right_panel = QFrame()
        right_panel.setStyleSheet(f"""
            QFrame {{
                background-color: {PANEL_BG.name()};
                border-radius: 15px;
                border: 2px solid {PURPLE_PRIMARY.name()};
            }}
        """)
        right_panel.setFixedWidth(300)
        
        right_layout = QVBoxLayout()
        
        upgrades_group = QGroupBox("–£–ª—É—á—à–µ–Ω–∏—è")
        upgrades_group.setStyleSheet(stats_group.styleSheet())
        
        upgrades_layout = QVBoxLayout()
        
        upgrade_buttons = [
            ("üíº –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥", "increase_income", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫"),
            ("‚ö° –£—Å–∫–æ—Ä–∏—Ç—å –∫–ª–∏–∫–∏", "speed_boost", "–£–º–µ–Ω—å—à–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏"),
            ("üè¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "invest", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥")
        ]
        
        for text, action, description in upgrade_buttons:
            btn = AnimatedButton(text)
            btn.setToolTip(description)
            btn.clicked.connect(lambda checked, a=action: self.handle_upgrade(a))
            upgrades_layout.addWidget(btn)
        
        upgrades_group.setLayout(upgrades_layout)
        right_layout.addWidget(upgrades_group)
        
        right_layout.addStretch()
        right_panel.setLayout(right_layout)
        
        # –°–æ–±–∏—Ä–∞–µ–º layout
        main_layout.addWidget(left_panel)
        main_layout.addWidget(center_panel, 1)
        main_layout.addWidget(right_panel)
        
        self.setLayout(main_layout)
        
    def handle_click(self):
        self.money += self.per_click
        self.total_clicks += 1
        self.update_display()
        self.moneyChanged.emit(self.money)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞
        self.animate_click()
        
    def handle_upgrade(self, action):
        cost = 0
        if action == "increase_income":
            cost = self.per_click * 10
            if self.money >= cost:
                self.money -= cost
                self.per_click += 1
        elif action == "speed_boost":
            cost = 500
            if self.money >= cost:
                self.money -= cost
                # –õ–æ–≥–∏–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤
        elif action == "invest":
            cost = 1000
            if self.money >= cost:
                self.money -= cost
                # –õ–æ–≥–∏–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        
        self.update_display()
        self.moneyChanged.emit(self.money)
        
    def update_display(self):
        self.money_label.setText(f"–ö–∞–ø–∏—Ç–∞–ª: ${self.money:,}")
        self.per_click_label.setText(f"–î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫: ${self.per_click}")
        self.clicks_label.setText(f"–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {self.total_clicks}")
        
    def animate_click(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        anim = QPropertyAnimation(self.click_button, b"geometry")
        anim.setDuration(100)
        anim.setStartValue(self.click_button.geometry())
        anim.setEndValue(QRect(
            self.click_button.x() - 5, 
            self.click_button.y() - 5,
            self.click_button.width() + 10,
            self.click_button.height() + 10
        ))
        
        anim2 = QPropertyAnimation(self.click_button, b"geometry")
        anim2.setDuration(100)
        anim2.setStartValue(QRect(
            self.click_button.x() - 5, 
            self.click_button.y() - 5,
            self.click_button.width() + 10,
            self.click_button.height() + 10
        ))
        anim2.setEndValue(self.click_button.geometry())
        
        sequence = QSequentialAnimationGroup()
        sequence.addAnimation(anim)
        sequence.addAnimation(anim2)
        sequence.start()
        
    def keyPressEvent(self, a0: QKeyEvent | None):
        if a0 is not None and a0.key() == Qt.Key.Key_Space:
            self.handle_click()
        elif a0 is not None and a0.key() == Qt.Key.Key_Escape:
            self.exit_to_menu()
        else:
            super().keyPressEvent(a0)
    """
    def show_shops(self):
        self.exitToMenu.emit()
        # –°–∏–≥–Ω–∞–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ MainWindow –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º
    
    def show_investments(self):
        self.exitToMenu.emit()
        # –°–∏–≥–Ω–∞–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ MainWindow –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
    
    def show_businesses(self):
        self.exitToMenu.emit()
        # –°–∏–≥–Ω–∞–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ MainWindow –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–∏–∑–Ω–µ—Å–∞–º
    
    def show_profile(self):
        self.exitToMenu.emit()
        # –°–∏–≥–Ω–∞–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ MainWindow –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
    
    def exit_to_menu(self):
        self.exitToMenu.emit()
    """
    
    def show_shops(self):
        self.navigationRequested.emit("shops")
    
    def show_investments(self):
        self.navigationRequested.emit("investments")
    
    def show_businesses(self):
        self.navigationRequested.emit("businesses")
    
    def show_profile(self):
        self.navigationRequested.emit("profile")
    
    def exit_to_menu(self):
        self.navigationRequested.emit("main_menu")

@dataclass
class Product:
    id: int
    name: str
    price: int
    description: str
    category: str
    stats: str = ""

class ShopSystem:
    def __init__(self):
        self.export = ExportDB()
        
    def load_products(self, category):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        products = []
        
        if category == "islands":
            data = self.export.get_shop_islands()
            products.append(Product(data[0], data[1], data[2], data[3], "–û—Å—Ç—Ä–æ–≤–∞"))
        elif category == "boosters":
            data = self.export.get_shop_boosters()
            products.append(Product(data[0], data[1], data[2], data[3], "–ë—É—Å—Ç–µ—Ä—ã"))
        elif category == "cars":
            data = self.export.get_shop_cars()
            products.append(Product(data[0], data[1], data[2], data[3], "–ú–∞—à–∏–Ω—ã", data[4]))
            
        return products

class InvestmentMenu(QWidget):
    """–ú–µ–Ω—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    
    exitToClicker = pyqtSignal()
    exitToMenu = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.export = ExportDB()
        self.current_tab = "stocks"
        
        self.init_ui()
        
    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ü–æ—Ä—Ç—Ñ–µ–ª—å")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 32px; font-weight: bold;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_layout.addWidget(title)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = AnimatedButton("üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_btn.clicked.connect(self.exitToClicker.emit)
        main_layout.addWidget(back_btn)
        
        # –í–∏–¥–∂–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_widget = self.create_portfolio_widget()
        main_layout.addWidget(portfolio_widget)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet(f"""
            QTabWidget::pane {{
                border: 2px solid {PURPLE_PRIMARY.name()};
                border-radius: 10px;
                background-color: {PANEL_BG.name()};
            }}
            QTabBar::tab {{
                background-color: {DEEP_PURPLE.name()};
                color: {TEXT_PRIMARY.name()};
                padding: 10px 20px;
                border: 1px solid {PURPLE_PRIMARY.name()};
                border-radius: 5px;
                margin-right: 2px;
            }}
            QTabBar::tab:selected {{
                background-color: {PURPLE_PRIMARY.name()};
            }}
            QTabBar::tab:hover {{
                background-color: {PURPLE_ACCENT.name()};
            }}
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–∫—Ü–∏–π
        stocks_tab = self.create_stocks_tab()
        self.tab_widget.addTab(stocks_tab, "üìà –ê–∫—Ü–∏–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        real_estate_tab = self.create_real_estate_tab()
        self.tab_widget.addTab(real_estate_tab, "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
        
        # –í–∫–ª–∞–¥–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_tab = self.create_crypto_tab()
        self.tab_widget.addTab(crypto_tab, "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞")
        
        main_layout.addWidget(self.tab_widget)
        
        self.setLayout(main_layout)
        
    def create_portfolio_widget(self):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background-color: {PANEL_BG.name()};
                border: 2px solid {PURPLE_ACCENT.name()};
                border-radius: 15px;
                padding: 15px;
            }}
        """)
        
        layout = QHBoxLayout()
        
        portfolio_data = self.export.get_bag()
        stats = [
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${portfolio_data[0]:,}",
            f"üìä –î–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio_data[1]}%",
            f"üíµ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: ${portfolio_data[2]:,}/–º–µ—Å",
            f"üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: {portfolio_data[3]}%"
        ]
        
        for stat in stats:
            label = QLabel(stat)
            label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 14px; padding: 5px;")
            layout.addWidget(label)
        
        widget.setLayout(layout)
        return widget
        
    def create_stocks_tab(self):
        widget = QWidget()
        layout = QVBoxLayout()
        
        stocks = self.export.get_actives()
        for stock in stocks:
            stock_widget = self.create_investment_item(stock, "–ê–∫—Ü–∏—è", "üìà")
            layout.addWidget(stock_widget)
        
        layout.addStretch()
        widget.setLayout(layout)
        return widget
        
    def create_real_estate_tab(self):
        widget = QWidget()
        layout = QVBoxLayout()
        
        properties = self.export.get_homes()
        for prop in properties:
            prop_widget = self.create_investment_item(prop, "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "üè†")
            layout.addWidget(prop_widget)
        
        layout.addStretch()
        widget.setLayout(layout)
        return widget
        
    def create_crypto_tab(self):
        widget = QWidget()
        layout = QVBoxLayout()
        
        cryptos = self.export.get_crypto()
        for crypto in cryptos:
            crypto_widget = self.create_investment_item(crypto, "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚Çø")
            layout.addWidget(crypto_widget)
        
        layout.addStretch()
        widget.setLayout(layout)
        return widget
        
    def create_investment_item(self, name, type, icon):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background-color: {CARD_BG.name()};
                border: 1px solid {PURPLE_PRIMARY.name()};
                border-radius: 10px;
                padding: 15px;
                margin: 5px;
            }}
        """)
        
        layout = QHBoxLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_layout = QVBoxLayout()
        
        name_label = QLabel(f"{icon} {name}")
        name_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 16px; font-weight: bold;")
        
        type_label = QLabel(type)
        type_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
        
        info_layout.addWidget(name_label)
        info_layout.addWidget(type_label)
        
        layout.addLayout(info_layout)
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        action_btn = AnimatedButton("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
        action_btn.setFixedSize(120, 35)
        layout.addWidget(action_btn)
        
        widget.setLayout(layout)
        return widget
        
    def keyPressEvent(self, a0: QKeyEvent | None):
        if a0 is not None and a0.key() == Qt.Key.Key_Escape:
            self.exitToMenu.emit()
        else:
            super().keyPressEvent(a0)

class ShopSelectionMenu(QWidget):
    """–í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞"""
    
    shopSelected = pyqtSignal(str)
    navigationRequested = pyqtSignal(str)
    exitToClicker = pyqtSignal()
    exitToMenu = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(50, 50, 50, 50)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ú–∞–≥–∞–∑–∏–Ω—ã")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 48px; font-weight: bold;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = AnimatedButton("üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_btn.clicked.connect(self.exitToClicker)
        layout.addWidget(back_btn)
        
        subtitle = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–æ–∫")
        subtitle.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 24px;")
        subtitle.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(subtitle)
        
        layout.addSpacing(50)
        
        # –ö–Ω–æ–ø–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        shops_layout = QHBoxLayout()
        shops_layout.setSpacing(30)
        shops_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –°–≤–µ—Ç–ª—ã–π –º–∞–≥–∞–∑–∏–Ω
        light_shop_btn = self.create_shop_button(
            "üè™ –°–≤–µ—Ç–ª—ã–π —Ä—ã–Ω–æ–∫", 
            "–õ–µ–≥–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏", 
            "legal"
        )
        shops_layout.addWidget(light_shop_btn)
        
        # –ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫
        dark_shop_btn = self.create_shop_button(
            "üåë –ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫", 
            "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∏ —Ä–µ–¥–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", 
            "black_market"
        )
        shops_layout.addWidget(dark_shop_btn)
        
        layout.addLayout(shops_layout)
        layout.addStretch()
        
        self.setLayout(layout)
        
    def create_shop_button(self, title, description, shop_type):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {PANEL_BG.name()}, stop:1 {CARD_BG.name()});
                border: 3px solid {PURPLE_PRIMARY.name()};
                border-radius: 20px;
                padding: 30px;
            }}
            QFrame:hover {{
                border: 3px solid {PURPLE_ACCENT.name()};
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {PURPLE_PRIMARY.name()}, stop:1 {DEEP_PURPLE.name()});
            }}
        """)
        widget.setFixedSize(400, 300)
        widget.setCursor(Qt.CursorShape.PointingHandCursor)
        
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 28px; font-weight: bold;")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        layout.addSpacing(20)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = QLabel(description)
        desc_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 16px;")
        desc_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        layout.addSpacing(30)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
        select_btn = AnimatedButton("–í—ã–±—Ä–∞—Ç—å")
        select_btn.clicked.connect(lambda: self.shopSelected.emit(shop_type))
        layout.addWidget(select_btn)
        
        widget.setLayout(layout)
        return widget
        
    def keyPressEvent(self, a0: QKeyEvent | None):
        if a0 is not None and a0.key() == Qt.Key.Key_Escape:
            self.exitToMenu.emit()
        else:
            super().keyPressEvent(a0)

    def show_clicker_game(self):
        self.navigationRequested.emit("clicker")

class LightShopMenu(QWidget):
    """–°–≤–µ—Ç–ª—ã–π –º–∞–≥–∞–∑–∏–Ω"""
    
    exitToShopSelectionMenu = pyqtSignal()
    exitToMenu = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.shop_system = ShopSystem()
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üè™ –°–≤–µ—Ç–ª—ã–π —Ä—ã–Ω–æ–∫")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 32px; font-weight: bold;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = AnimatedButton("üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_btn.clicked.connect(self.exitToShopSelectionMenu.emit)
        layout.addWidget(back_btn)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        categories_layout = QGridLayout()
        categories_layout.setSpacing(15)
        
        categories = [
            ("üèùÔ∏è –û—Å—Ç—Ä–æ–≤–∞", "islands"),
            ("üöÄ –ë—É—Å—Ç–µ—Ä—ã", "boosters"), 
            ("üñºÔ∏è NFT", "nft"),
            ("üöó –ú–∞—à–∏–Ω—ã", "cars"),
            ("üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", "unique"),
            ("üõ•Ô∏è –Ø—Ö—Ç—ã", "yachts"),
            ("‚úàÔ∏è –°–∞–º–æ–ª—ë—Ç—ã", "planes"),
            ("üèõÔ∏è –†–µ–∑–∏–¥–µ–Ω—Ü–∏—è", "residence"),
            ("üíç –Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è", "jewelry")
        ]
        
        row, col = 0, 0
        for name, category in categories:
            btn = self.create_category_button(name, category)
            categories_layout.addWidget(btn, row, col)
            col += 1
            if col > 2:
                col = 0
                row += 1
        
        layout.addLayout(categories_layout)
        layout.addStretch()
        
        self.setLayout(layout)
        
    def create_category_button(self, name, category):
        btn = AnimatedButton(name)
        btn.setFixedHeight(80)
        btn.clicked.connect(lambda: self.open_category(category))
        return btn
        
    def open_category(self, category):
        print(f"–û—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
    def keyPressEvent(self, a0: QKeyEvent | None):
        if a0 is not None and a0.key() == Qt.Key.Key_Escape:
            self.exitToMenu.emit()
        else:
            super().keyPressEvent(a0)

class BusinessManager:
    def __init__(self):
        self.my_businesses = []
        self.business_data = self.load_business_data()
        self.crypto_balance = 50000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
        self.reputation = 100  # –†–µ–ø—É—Ç–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        self.risk_level = 0  # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        self.player_balance = 1000000  # –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        
    def load_business_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–∑–Ω–µ—Å–∞—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏"""
        return [
            # –°–≤–µ—Ç–ª—ã–µ –±–∏–∑–Ω–µ—Å—ã
            {
                'id': 1,
                'name': '–ü—Ä–æ–¥–∞–∂–∞ (Retail)',
                'icon': 'üè™',
                'level': 1,
                'income_per_hour': 5000,
                'workers': 5,
                'workload': 75,
                'primary_action': '–û—Ç–∫—Ä—ã—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
                'available_roles': [
                    {'name': '–ü—Ä–æ–¥–∞–≤–µ—Ü', 'cost': 1000, 'effect': '+10% –¥–æ—Ö–æ–¥'},
                    {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 'cost': 3000, 'effect': '+25% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
                    {'name': 'Merchandiser', 'cost': 2000, 'effect': '+15% –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–ú–∞—Ä–∫–µ—Ç-–∫–∞–º–ø–∞–Ω–∏—è', 'cooldown': '6—á', 'cost': 15000, 'effect': '+200% —Å–ø—Ä–æ—Å –Ω–∞ 1—á'},
                    {'name': '–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏', 'cooldown': '24—á', 'cost': 25000, 'effect': '+10% –º–∞—Ä–∂–∞'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['IT-—Å—Ç–∞—Ä—Ç–∞–ø', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞'],
                'price': 50000
            },
            {
                'id': 2,
                'name': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                'icon': 'üèóÔ∏è',
                'level': 1,
                'income_per_hour': 12000,
                'workers': 12,
                'workload': 80,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç',
                'available_roles': [
                    {'name': '–ë—Ä–∏–≥–∞–¥–∏—Ä', 'cost': 8000, 'effect': '+20% —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'},
                    {'name': '–ò–Ω–∂–µ–Ω–µ—Ä', 'cost': 12000, 'effect': '+25% –∫–∞—á–µ—Å—Ç–≤–æ'},
                    {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', 'cost': 15000, 'effect': '+30% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–≠–∫—Å–ø—Ä–µ—Å—Å-–ª–∞–≥', 'cooldown': '24—á', 'cost': 40000, 'effect': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ 50%'},
                    {'name': '–õ–æ–±–±–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cooldown': '48—á', 'cost': 30000, 'effect': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–£–ì–ú–ö', '–≠–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'],
                'price': 150000
            },
            {
                'id': 3,
                'name': 'IT-—Å—Ç–∞—Ä—Ç–∞–ø',
                'icon': 'üíª',
                'level': 1,
                'income_per_hour': 8000,
                'workers': 3,
                'workload': 60,
                'primary_action': '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏—á—É',
                'available_roles': [
                    {'name': 'Junior Dev', 'cost': 2000, 'effect': '+5% —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'},
                    {'name': 'Senior Dev', 'cost': 5000, 'effect': '+20% –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞'},
                    {'name': 'PM', 'cost': 4000, 'effect': '+15% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã'},
                    {'name': 'Growth Hacker', 'cost': 4500, 'effect': '+25% –ø—Ä–∏—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
                ],
                'special_modes': [
                    {'name': '–ò–Ω–≤–µ—Å—Ç-—Ä–∞—É–Ω–¥', 'cooldown': '12—á', 'cost': 30000, 'effect': '+50000 –∫–∞–ø–∏—Ç–∞–ª–∞'},
                    {'name': '–ë–µ—Ç–∞-—Ç–µ—Å—Ç', 'cooldown': '8—á', 'cost': 10000, 'effect': '–®–∞–Ω—Å –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'],
                'price': 75000
            },
            {
                'id': 4,
                'name': '–≠–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
                'icon': '‚ö°',
                'level': 1,
                'income_per_hour': 18000,
                'workers': 8,
                'workload': 70,
                'primary_action': '–ü–ª–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                'available_roles': [
                    {'name': '–î–∏—Å–ø–µ—Ç—á–µ—Ä', 'cost': 7000, 'effect': '+15% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Ç–∏'},
                    {'name': '–ò–Ω–∂–µ–Ω–µ—Ä –ª–∏–Ω–∏–∏', 'cost': 9000, 'effect': '+20% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'},
                    {'name': '–ê–Ω–∞–ª–∏—Ç–∏–∫ —Å–ø—Ä–æ—Å–∞', 'cost': 6000, 'effect': '+25% –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ'}
                ],
                'special_modes': [
                    {'name': 'Smart Grid', 'cooldown': '36—á', 'cost': 60000, 'effect': 'P2P —Ç–æ—Ä–≥–æ–≤–ª—è —ç–Ω–µ—Ä–≥–∏–µ–π'},
                    {'name': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ', 'cooldown': '12—á', 'cost': 20000, 'effect': '+300% –¥–æ—Ö–æ–¥ –Ω–∞ 2—á'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–¢–µ–Ω–µ–≤–æ–π –º–∞–π–Ω–∏–Ω–≥'],
                'price': 200000,
                'smart_grid': False
            },
            {
                'id': 5,
                'name': '–°–µ—Ç—å –∫–æ—Ñ–µ–µ–Ω',
                'icon': '‚òï',
                'level': 1,
                'income_per_hour': 6000,
                'workers': 6,
                'workload': 65,
                'primary_action': '–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É',
                'available_roles': [
                    {'name': '–ë–∞—Ä–∏—Å—Ç–∞', 'cost': 2000, 'effect': '+10% –∫–∞—á–µ—Å—Ç–≤–æ'},
                    {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 'cost': 5000, 'effect': '+20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
                    {'name': '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', 'cost': 4000, 'effect': '+15% –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–§—Ä–∞–Ω—à–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cooldown': '48—á', 'cost': 35000, 'effect': '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ +50%'},
                    {'name': '–°–µ–∑–æ–Ω–Ω–∞—è –∞–∫—Ü–∏—è', 'cooldown': '24—á', 'cost': 15000, 'effect': '+100% –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 4—á'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–ü—Ä–æ–¥–∞–∂–∞ (Retail)', '–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è'],
                'price': 60000
            },
            {
                'id': 6,
                'name': '–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
                'icon': 'üß¨',
                'level': 1,
                'income_per_hour': 12000,
                'workers': 8,
                'workload': 45,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                'available_roles': [
                    {'name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', 'cost': 6000, 'effect': '+15% —Å–∫–æ—Ä–æ—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π'},
                    {'name': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', 'cost': 7000, 'effect': '+20% —É—Å–ø–µ—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π'},
                    {'name': '–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä', 'cost': 5500, 'effect': '-30% –≤—Ä–µ–º—è –æ–¥–æ–±—Ä–µ–Ω–∏—è'}
                ],
                'special_modes': [
                    {'name': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è', 'cooldown': '24—á', 'cost': 50000, 'effect': '–ü–∞—Ç–µ–Ω—Ç + –¥–æ—Ö–æ–¥'},
                    {'name': '–ü–æ–¥–∞—Ç—å –Ω–∞ –ø–∞—Ç–µ–Ω—Ç', 'cooldown': '48—á', 'cost': 25000, 'effect': '–ú–æ–Ω–æ–ø–æ–ª–∏—è 6 –º–µ—Å—è—Ü–µ–≤'}
                ],
                'can_go_dark': True,
                'dark_actions': [
                    {'name': '–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è', 'income_multiplier': 2.0, 'risk_increase': 25},
                    {'name': '–ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∏–º–ø–ª–∞–Ω—Ç–æ–≤', 'income_multiplier': 3.0, 'risk_increase': 40}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä'],
                'price': 150000
            },
            {
                'id': 7,
                'name': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
                'icon': 'üéì',
                'level': 1,
                'income_per_hour': 9000,
                'workers': 5,
                'workload': 55,
                'primary_action': '–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å',
                'available_roles': [
                    {'name': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥', 'cost': 5000, 'effect': '+20% –∫–∞—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤'},
                    {'name': '–ö—É—Ä–∞—Ç–æ—Ä', 'cost': 4000, 'effect': '+15% –∑–∞–≤–µ—Ä—à–∞–µ–º–æ—Å—Ç—å'},
                    {'name': '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', 'cost': 4500, 'effect': '+25% –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ'}
                ],
                'special_modes': [
                    {'name': 'B2B –ö–æ–Ω—Ç—Ä–∞–∫—Ç', 'cooldown': '36—á', 'cost': 40000, 'effect': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'},
                    {'name': '–ê–≤—Ç–æ—Ä-–ø—Ä–µ–º–∏—è', 'cooldown': '24—á', 'cost': 20000, 'effect': '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['IT-—Å—Ç–∞—Ä—Ç–∞–ø', 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'],
                'price': 100000
            },
            {
                'id': 8,
                'name': '–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫',
                'icon': 'üè≠',
                'level': 1,
                'income_per_hour': 15000,
                'workers': 7,
                'workload': 60,
                'primary_action': '–ü—Ä–∏–Ω—è—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø',
                'available_roles': [
                    {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∫–∞', 'cost': 8000, 'effect': '+20% –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ'},
                    {'name': '–ê–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä', 'cost': 12000, 'effect': '+30% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å'},
                    {'name': '–†–µ–∑–∏–¥–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', 'cost': 10000, 'effect': '+25% –¥–æ—Ö–æ–¥ —Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤'}
                ],
                'special_modes': [
                    {'name': '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–∞–∫–µ—Ç', 'cooldown': '48—á', 'cost': 50000, 'effect': '–ü—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏'},
                    {'name': '–≠–∫–∑–∏—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', 'cooldown': '72—á', 'cost': 80000, 'effect': '–ö—Ä—É–ø–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['IT-—Å—Ç–∞—Ä—Ç–∞–ø', 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'],
                'price': 180000
            },
            {
                'id': 9,
                'name': '–ê–≤—Ç–æ–ø—Ä–æ–º',
                'icon': 'üöó',
                'level': 1,
                'income_per_hour': 20000,
                'workers': 15,
                'workload': 80,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏',
                'available_roles': [
                    {'name': '–ò–Ω–∂–µ–Ω–µ—Ä', 'cost': 8000, 'effect': '+10% –∫–∞—á–µ—Å—Ç–≤–æ'},
                    {'name': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', 'cost': 10000, 'effect': '+15% –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏'},
                    {'name': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', 'cost': 12000, 'effect': '+20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': 'EV –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞', 'cooldown': '72—á', 'cost': 100000, 'effect': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π'},
                    {'name': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'cooldown': '48—á', 'cost': 75000, 'effect': '-40% —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–£–ì–ú–ö', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞'],
                'price': 300000,
                'ev_production': False
            },
            {
                'id': 10,
                'name': '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                'icon': 'üõ°Ô∏è',
                'level': 1,
                'income_per_hour': 16000,
                'workers': 6,
                'workload': 70,
                'primary_action': '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
                'available_roles': [
                    {'name': 'Pentester', 'cost': 9000, 'effect': '+20% –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π'},
                    {'name': 'Analyst', 'cost': 8000, 'effect': '+15% –∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑'},
                    {'name': 'SOC Operator', 'cost': 7000, 'effect': '+25% —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏'}
                ],
                'special_modes': [
                    {'name': 'Incident Response', 'cooldown': '12—á', 'cost': 30000, 'effect': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥'},
                    {'name': 'Threat Intelligence', 'cooldown': '24—á', 'cost': 25000, 'effect': '–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['IT-—Å—Ç–∞—Ä—Ç–∞–ø', '–ë–∞–Ω–∫'],
                'price': 140000
            },
            {
                'id': 11,
                'name': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä',
                'icon': 'üè•',
                'level': 1,
                'income_per_hour': 14000,
                'workers': 10,
                'workload': 75,
                'primary_action': '–û—Ç–∫—Ä—ã—Ç—å –æ—Ç–¥–µ–ª',
                'available_roles': [
                    {'name': '–í—Ä–∞—á', 'cost': 10000, 'effect': '+20% –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥'},
                    {'name': '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', 'cost': 5000, 'effect': '+15% —É—Ö–æ–¥'},
                    {'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'cost': 4000, 'effect': '+25% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–¢–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞', 'cooldown': '24—á', 'cost': 30000, 'effect': '–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'},
                    {'name': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã', 'cooldown': '48—á', 'cost': 50000, 'effect': '–ü—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞'],
                'price': 160000
            },
            {
                'id': 12,
                'name': '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                'icon': 'ü§ñ',
                'level': 1,
                'income_per_hour': 18000,
                'workers': 10,
                'workload': 70,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Ä–æ–±–æ—Ç–∞',
                'available_roles': [
                    {'name': '–ú–µ—Ö–∞—Ç—Ä–æ–Ω–∏–∫', 'cost': 9000, 'effect': '+15% —Ç–æ—á–Ω–æ—Å—Ç—å'},
                    {'name': 'AI-–∏–Ω–∂–µ–Ω–µ—Ä', 'cost': 12000, 'effect': '+25% –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–∏—Å—Ç–µ–º'},
                    {'name': '–¢–µ—Ö–ª–∏–¥', 'cost': 15000, 'effect': '+30% —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'}
                ],
                'special_modes': [
                    {'name': '–ë–∏–æ–ø—Ä–æ—Ç–µ–∑—ã', 'cooldown': '36—á', 'cost': 80000, 'effect': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞'},
                    {'name': '–ù–µ–π—Ä–æ—á–∏–ø—ã', 'cooldown': '48—á', 'cost': 120000, 'effect': '–ù–µ–π—Ä–æ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'],
                'price': 250000,
                'bio_prosthetics': False,
                'neuro_chips': False
            },
            {
                'id': 13,
                'name': '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç—É—Ä–∏–∑–º',
                'icon': 'üöÄ',
                'level': 1,
                'income_per_hour': 35000,
                'workers': 5,
                'workload': 40,
                'primary_action': '–°—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä–∞–±–ª—å',
                'available_roles': [
                    {'name': '–ê—Å—Ç—Ä–æ–∏–Ω–∂–µ–Ω–µ—Ä', 'cost': 20000, 'effect': '+25% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'},
                    {'name': '–ö–∞–ø–∏—Ç–∞–Ω', 'cost': 25000, 'effect': '+30% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'},
                    {'name': 'PR-–º–µ–Ω–µ–¥–∂–µ—Ä', 'cost': 15000, 'effect': '+40% –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ'}
                ],
                'special_modes': [
                    {'name': '–ó–≤—ë–∑–¥–Ω—ã–π —Ä–µ–π—Å', 'cooldown': '96—á', 'cost': 200000, 'effect': 'PR –±–æ–Ω—É—Å +100%'},
                    {'name': '–ù–∞—É—á–Ω–∞—è –º–∏—Å—Å–∏—è', 'cooldown': '72—á', 'cost': 150000, 'effect': '–ì—Ä–∞–Ω—Ç—ã + —Ä–µ–ø—É—Ç–∞—Ü–∏—è'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', '–û–±–æ—Ä–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ'],
                'price': 500000
            },
            {
                'id': 14,
                'name': 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                'icon': 'üß†',
                'level': 1,
                'income_per_hour': 15000,
                'workers': 6,
                'workload': 65,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏',
                'available_roles': [
                    {'name': 'ML-–∏–Ω–∂–µ–Ω–µ—Ä', 'cost': 10000, 'effect': '+20% –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π'},
                    {'name': '–î–∞—Ç–∞-–∏–Ω–∂–µ–Ω–µ—Ä', 'cost': 8000, 'effect': '+15% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö'},
                    {'name': 'DevOps', 'cost': 7000, 'effect': '+25% —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'}
                ],
                'special_modes': [
                    {'name': 'Train Big', 'cooldown': '24—á', 'cost': 50000, 'effect': '–ö—Ä—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å +50% –¥–æ—Ö–æ–¥'},
                    {'name': 'API –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cooldown': '48—á', 'cost': 30000, 'effect': '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['IT-—Å—Ç–∞—Ä—Ç–∞–ø', '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'],
                'price': 200000,
                'servers': 0,
                'data_center': False
            },
            {
                'id': 15,
                'name': '–ë–∞–Ω–∫',
                'icon': 'üè¶',
                'level': 1,
                'income_per_hour': 22000,
                'workers': 8,
                'workload': 85,
                'primary_action': '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç',
                'available_roles': [
                    {'name': '–†–∏—Å–∫-–æ—Ñ–∏—Ü–µ—Ä', 'cost': 15000, 'effect': '+20% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'},
                    {'name': '–ö–ª–µ—Ä–∫', 'cost': 6000, 'effect': '+15% –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'},
                    {'name': '–¢—Ä–µ–π–¥–µ—Ä', 'cost': 18000, 'effect': '+25% –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥'}
                ],
                'special_modes': [
                    {'name': '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', 'cooldown': '24—á', 'cost': 40000, 'effect': '–ú–∞—Å—Å–æ–≤–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ'},
                    {'name': '–ê—É–¥–∏—Ç', 'cooldown': '48—á', 'cost': 30000, 'effect': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–¢—Ä–µ–π–¥–∏–Ω–≥', '–û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥'],
                'price': 280000
            },
            {
                'id': 16,
                'name': '–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
                'icon': 'üõ¢Ô∏è',
                'level': 1,
                'income_per_hour': 25000,
                'workers': 12,
                'workload': 80,
                'primary_action': '–ù–∞—á–∞—Ç—å –±—É—Ä–µ–Ω–∏–µ',
                'available_roles': [
                    {'name': '–ì–µ–æ–ª–æ–≥', 'cost': 12000, 'effect': '+25% —É—Å–ø–µ—Ö —Ä–∞–∑–≤–µ–¥–∫–∏'},
                    {'name': '–ò–Ω–∂–µ–Ω–µ—Ä', 'cost': 10000, 'effect': '+20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
                    {'name': '–¢—Ä–µ–π–¥–µ—Ä', 'cost': 15000, 'effect': '+30% —Ç–æ—Ä–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å'}
                ],
                'special_modes': [
                    {'name': '–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cooldown': '24—á', 'cost': 50000, 'effect': '–§–∏–∫—Å–∞—Ü–∏—è —Ü–µ–Ω'},
                    {'name': '–ù–ò–û–ö–†', 'cooldown': '48—á', 'cost': 60000, 'effect': '–≠–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–£–ì–ú–ö', '–≠–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'],
                'price': 350000
            },
            {
                'id': 17,
                'name': '–¢—Ä–µ–π–¥–∏–Ω–≥',
                'icon': 'üìä',
                'level': 1,
                'income_per_hour': 25000,
                'workers': 4,
                'workload': 90,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é',
                'available_roles': [
                    {'name': 'Quant', 'cost': 20000, 'effect': '+30% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤'},
                    {'name': 'Trader', 'cost': 15000, 'effect': '+25% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫'},
                    {'name': 'Ops', 'cost': 10000, 'effect': '+20% —Å–∫–æ—Ä–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è'}
                ],
                'special_modes': [
                    {'name': '–ê—Ä–±–∏—Ç—Ä–∞–∂', 'cooldown': '12—á', 'cost': 0, 'effect': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∑–µ—Ä–≤–∞'},
                    {'name': '–ú–∞—Ä–∫–µ—Ç-–º–µ–π–∫–∏–Ω–≥', 'cooldown': '24—á', 'cost': 0, 'effect': '–ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–ë–∞–Ω–∫', '–ö—Ä–∏–ø—Ç–æ-–º–∞–π–Ω–∏–Ω–≥'],
                'price': 180000,
                'crypto_reserve_usage': 0.1
            },
            {
                'id': 18,
                'name': '–û–±–æ—Ä–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ',
                'icon': 'ü™ñ',
                'level': 1,
                'income_per_hour': 30000,
                'workers': 10,
                'workload': 70,
                'primary_action': '–ü–æ–¥–∞—Ç—å –Ω–∞ —Ç–µ–Ω–¥–µ—Ä',
                'available_roles': [
                    {'name': '–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', 'cost': 18000, 'effect': '+25% –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏'},
                    {'name': 'PM', 'cost': 15000, 'effect': '+20% —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'},
                    {'name': 'Compliance', 'cost': 12000, 'effect': '+30% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'}
                ],
                'special_modes': [
                    {'name': '–ì–æ—Å–∑–∞–∫–∞–∑', 'cooldown': '48—á', 'cost': 80000, 'effect': '–ö—Ä—É–ø–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç'},
                    {'name': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', 'cooldown': '72—á', 'cost': 120000, 'effect': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–£–ì–ú–ö', 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'],
                'price': 400000
            },
            {
                'id': 19,
                'name': '–£–ì–ú–ö',
                'icon': '‚õèÔ∏è',
                'level': 1,
                'income_per_hour': 30000,
                'workers': 25,
                'workload': 85,
                'primary_action': '–û—Ç–∫—Ä—ã—Ç—å —Ä—É–¥–Ω–∏–∫',
                'available_roles': [
                    {'name': '–ì–æ—Ä–Ω—è–∫', 'cost': 5000, 'effect': '+10% –¥–æ–±—ã—á–∞'},
                    {'name': '–ú–µ—Ç–∞–ª–ª—É—Ä–≥', 'cost': 12000, 'effect': '+20% –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞'},
                    {'name': '–õ–æ–≥–∏—Å—Ç', 'cost': 8000, 'effect': '+15% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–æ–∫'}
                ],
                'special_modes': [
                    {'name': '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'cooldown': '96—á', 'cost': 200000, 'effect': '–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ä—ã–Ω–∫–æ–º'},
                    {'name': '–°–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ö–æ–¥', 'cooldown': '48—á', 'cost': 50000, 'effect': '–¢–µ–º–Ω—ã–π –¥–æ—Ö–æ–¥ +100%'}
                ],
                'can_go_dark': True,
                'dark_actions': [
                    {'name': '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç', 'income_multiplier': 2.5, 'risk_increase': 30},
                    {'name': '–°—Ö–µ–º—ã —É–∫–ª–æ–Ω–µ–Ω–∏—è', 'income_multiplier': 1.8, 'risk_increase': 20}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'light',
                'synergies': ['–ê–≤—Ç–æ–ø—Ä–æ–º', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ'],
                'price': 400000
            },

            # –¢–µ–º–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã
            {
                'id': 101,
                'name': '–ö–∏–±–µ—Ä-–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ',
                'icon': 'üåê',
                'level': 1,
                'income_per_hour': 15000,
                'workers': 4,
                'workload': 85,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é',
                'available_roles': [
                    {'name': '–û–ø–µ—Ä–∞—Ç–æ—Ä', 'cost': 3000, 'effect': '+15% —É—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'},
                    {'name': 'Crypto Launder', 'cost': 8000, 'effect': '-20% —Ä–∏—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è'},
                    {'name': 'Packer', 'cost': 5000, 'effect': '+25% —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': 'Exploit Market', 'cooldown': '12—á', 'cost': 20000, 'effect': '–ü—Ä–æ–¥–∞–∂–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤'},
                    {'name': 'Cover-up', 'cooldown': '6—á', 'cost': 10000, 'effect': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –Ω–∞ 50%'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 25,
                'price': 100000
            },
            {
                'id': 102,
                'name': '–¢–µ–Ω–µ–≤–æ–π –±–∞–Ω–∫–∏–Ω–≥',
                'icon': 'üí≥',
                'level': 1,
                'income_per_hour': 18000,
                'workers': 5,
                'workload': 75,
                'primary_action': '–û—Ç–∫—Ä—ã—Ç—å –ø—É–ª',
                'available_roles': [
                    {'name': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', 'cost': 8000, 'effect': '+20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
                    {'name': '–Æ—Ä–∏—Å—Ç', 'cost': 12000, 'effect': '-25% —Ä–∏—Å–∫'},
                    {'name': '–ë—Ä–æ–∫–µ—Ä', 'cost': 10000, 'effect': '+30% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–û—Ñ—à–æ—Ä-—Å–µ—Ç—å', 'cooldown': '48—á', 'cost': 50000, 'effect': '–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Ç—å —Å—á–µ—Ç–æ–≤'},
                    {'name': '–°–ª–∏—è–Ω–∏–µ —Ñ–æ–Ω–¥–æ–≤', 'cooldown': '72—á', 'cost': 80000, 'effect': '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–≤'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 30,
                'price': 150000
            },
            {
                'id': 103,
                'name': '–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞',
                'icon': 'üì¶',
                'level': 1,
                'income_per_hour': 14000,
                'workers': 6,
                'workload': 80,
                'primary_action': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é',
                'available_roles': [
                    {'name': '–ö—É—Ä—å–µ—Ä', 'cost': 4000, 'effect': '+20% —Å–∫–æ—Ä–æ—Å—Ç—å'},
                    {'name': '–õ–æ–≥–∏—Å—Ç', 'cost': 7000, 'effect': '+25% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'},
                    {'name': '–ó–∞–ø—Ä–∞–≤—â–∏–∫', 'cost': 3000, 'effect': '+15% –¥–∞–ª—å–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–ë–æ–ª—å—à–æ–π —Ä–µ–π–¥', 'cooldown': '96—á', 'cost': 60000, 'effect': '–ö—Ä—É–ø–Ω–∞—è –ø–∞—Ä—Ç–∏—è +200% –¥–æ—Ö–æ–¥'},
                    {'name': '–í–∑—è—Ç–∫–∞', 'cooldown': '24—á', 'cost': 15000, 'effect': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –Ω–∞ 70%'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 35,
                'price': 120000
            },
            {
                'id': 104,
                'name': '–ü–∏—Ä–∞—Ç—Å–∫–æ–µ –ü–û',
                'icon': 'üè¥‚Äç‚ò†Ô∏è',
                'level': 1,
                'income_per_hour': 11000,
                'workers': 3,
                'workload': 70,
                'primary_action': '–í—ã–ø—É—Å—Ç–∏—Ç—å —Ä–µ–ª–∏–∑',
                'available_roles': [
                    {'name': 'Dev', 'cost': 6000, 'effect': '+20% –∫–∞—á–µ—Å—Ç–≤–æ'},
                    {'name': '–ö—Ä–µ–∞–∫–µ—Ä', 'cost': 8000, 'effect': '+25% –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã'},
                    {'name': 'Sysadmin', 'cost': 5000, 'effect': '+30% —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã', 'cooldown': '24—á', 'cost': 20000, 'effect': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞'},
                    {'name': '–ü–æ–¥–ø–æ–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫', 'cooldown': '48—á', 'cost': 30000, 'effect': '–ú–∞—Å—Å–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 20,
                'price': 90000
            },
            {
                'id': 105,
                'name': '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏',
                'icon': 'üé≤',
                'level': 1,
                'income_per_hour': 16000,
                'workers': 4,
                'workload': 85,
                'primary_action': '–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞–≤–∫—É',
                'available_roles': [
                    {'name': '–ö–∞—Å—Å–∏—Ä', 'cost': 5000, 'effect': '+15% –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'},
                    {'name': '–ê–Ω–∞–ª–∏—Ç–∏–∫', 'cost': 9000, 'effect': '+25% —Ç–æ—á–Ω–æ—Å—Ç—å'},
                    {'name': '–û—Ö—Ä–∞–Ω–∞', 'cost': 4000, 'effect': '+20% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–ò–Ω—Å–∞–π–¥–µ—Ä—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'cooldown': '24—á', 'cost': 40000, 'effect': '–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                    {'name': '–ó–µ–ª–µ–Ω–∞—è –∫–Ω–∏–≥–∞', 'cooldown': '48—á', 'cost': 25000, 'effect': 'VIP –∫–ª–∏–µ–Ω—Ç—ã +100% –¥–æ—Ö–æ–¥'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 28,
                'price': 130000
            },
            {
                'id': 106,
                'name': '–§–∞–ª—å—à–∏–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
                'icon': 'üìÑ',
                'level': 1,
                'income_per_hour': 9000,
                'workers': 4,
                'workload': 65,
                'primary_action': '–°–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Ç–∏—é',
                'available_roles': [
                    {'name': '–ì—Ä–∞—Ñ–∏–∫', 'cost': 6000, 'effect': '+25% –∫–∞—á–µ—Å—Ç–≤–æ'},
                    {'name': '–û—Ñ–∏—Å-–æ–ø–µ—Ä–∞—Ç–æ—Ä', 'cost': 4000, 'effect': '+20% —Å–∫–æ—Ä–æ—Å—Ç—å'},
                    {'name': '–ö—É—Ä—å–µ—Ä', 'cost': 3000, 'effect': '+15% –¥–æ—Å—Ç–∞–≤–∫–∞'}
                ],
                'special_modes': [
                    {'name': '–í–∏–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã', 'cooldown': '48—á', 'cost': 35000, 'effect': '–ü—Ä–µ–º–∏—É–º –¥–æ–∫—É–º–µ–Ω—Ç—ã'},
                    {'name': '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞', 'cooldown': '24—á', 'cost': 15000, 'effect': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 22,
                'price': 80000
            },
            {
                'id': 107,
                'name': '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç',
                'icon': 'üö¢',
                'level': 1,
                'income_per_hour': 17000,
                'workers': 7,
                'workload': 75,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–π—Å',
                'available_roles': [
                    {'name': '–ë—Ä–æ–∫–µ—Ä', 'cost': 8000, 'effect': '+20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
                    {'name': '–ö–∞–ø–∏—Ç–∞–Ω', 'cost': 12000, 'effect': '+25% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'},
                    {'name': '–°–∫–ª–∞–¥—Å–∫–æ–π', 'cost': 5000, 'effect': '+15% –ª–æ–≥–∏—Å—Ç–∏–∫–∞'}
                ],
                'special_modes': [
                    {'name': '–≠–∫—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏', 'cooldown': '72—á', 'cost': 70000, 'effect': '–ö—Ä—É–ø–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã'},
                    {'name': '–§–∞–ª—å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π', 'cooldown': '24—á', 'cost': 20000, 'effect': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 32,
                'price': 160000
            },
            {
                'id': 108,
                'name': '–¢–µ–Ω–µ–≤–æ–π –º–∞–π–Ω–∏–Ω–≥',
                'icon': '‚õèÔ∏è',
                'level': 1,
                'income_per_hour': 12000,
                'workers': 3,
                'workload': 75,
                'primary_action': '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É',
                'available_roles': [
                    {'name': 'Rigger', 'cost': 4000, 'effect': '+20% —Ö–µ—à—Ä–µ–π—Ç'},
                    {'name': 'Sysadmin', 'cost': 6000, 'effect': '+15% —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'},
                    {'name': '–≠–ª–µ–∫—Ç—Ä–∏–∫', 'cost': 3000, 'effect': '-25% —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ'}
                ],
                'special_modes': [
                    {'name': '–†–µ–∫—É–ø–µ—Ä–∞—Ü–∏—è —Ç–µ–ø–ª–∞', 'cooldown': '24—á', 'cost': 15000, 'effect': '–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏ + –¥–æ—Ö–æ–¥'},
                    {'name': '–ë–æ—Ç–Ω–µ—Ç', 'cooldown': '8—á', 'cost': 0, 'effect': '–í—Ä–µ–º–µ–Ω–Ω—ã–π +100% —Ö–µ—à—Ä–µ–π—Ç'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 20,
                'price': 80000,
                'heat_recovery': False,
                'botnet_active': False
            },
            {
                'id': 109,
                'name': '–ù–∞—Ä–∫–æ–∫–∞—Ä—Ç–µ–ª—å',
                'icon': 'üíä',
                'level': 1,
                'income_per_hour': 25000,
                'workers': 8,
                'workload': 90,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
                'available_roles': [
                    {'name': '–•–∏–º–∏–∫', 'cost': 10000, 'effect': '+25% –∫–∞—á–µ—Å—Ç–≤–æ'},
                    {'name': '–û—Ö—Ä–∞–Ω–∞', 'cost': 6000, 'effect': '+30% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'},
                    {'name': '–ö—É—Ä—å–µ—Ä', 'cost': 5000, 'effect': '+20% –¥–æ—Å—Ç–∞–≤–∫–∞'}
                ],
                'special_modes': [
                    {'name': '–ó–∞—Ö–≤–∞—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', 'cooldown': '48—á', 'cost': 50000, 'effect': '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è'},
                    {'name': '–ö–æ—Ä—Ä—É–ø—Ü–∏—è', 'cooldown': '24—á', 'cost': 30000, 'effect': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ —Ä–µ–π–¥–æ–≤'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 45,
                'price': 200000
            },
            {
                'id': 110,
                'name': '–û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥',
                'icon': 'üí∏',
                'level': 1,
                'income_per_hour': 20000,
                'workers': 5,
                'workload': 60,
                'primary_action': '–û—Ç–º—ã—Ç—å —Å—É–º–º—É',
                'available_roles': [
                    {'name': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', 'cost': 10000, 'effect': '+20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
                    {'name': '–Æ—Ä–∏—Å—Ç', 'cost': 15000, 'effect': '-30% —Ä–∏—Å–∫'},
                    {'name': 'Front Manager', 'cost': 12000, 'effect': '+25% –¥–æ–≤–µ—Ä–∏–µ –∫–æ–º–ø–∞–Ω–∏–π'}
                ],
                'special_modes': [
                    {'name': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏', 'cooldown': '48—á', 'cost': 50000, 'effect': '–ë–æ–ª—å—à–∏–µ —Å—É–º–º—ã + –¥–æ–≤–µ—Ä–∏–µ'},
                    {'name': '–ü–∞–Ω–∏–∫-—Ä–µ–∂–∏–º', 'cooldown': '24—á', 'cost': 0, 'effect': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 35,
                'price': 150000,
                'trust_level': 1,
                'max_launder_amount': 50000
            },
            {
                'id': 111,
                'name': '–ü–æ–¥–ø–æ–ª—å–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥',
                'icon': 'üñ•Ô∏è',
                'level': 1,
                'income_per_hour': 13000,
                'workers': 4,
                'workload': 70,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É',
                'available_roles': [
                    {'name': 'Sysadmin', 'cost': 7000, 'effect': '+25% —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'},
                    {'name': 'Network', 'cost': 8000, 'effect': '+30% —Å–∫–æ—Ä–æ—Å—Ç—å'},
                    {'name': 'Support', 'cost': 5000, 'effect': '+20% –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'}
                ],
                'special_modes': [
                    {'name': 'DDOS-–∑–∞—â–∏—Ç–∞', 'cooldown': '24—á', 'cost': 25000, 'effect': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'},
                    {'name': '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', 'cooldown': '48—á', 'cost': 30000, 'effect': '–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å +50%'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 18,
                'price': 110000
            },
            {
                'id': 112,
                'name': '–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥',
                'icon': 'üë•',
                'level': 1,
                'income_per_hour': 10000,
                'workers': 6,
                'workload': 80,
                'primary_action': '–í–∑—è—Ç—å –∑–∞–∫–∞–∑',
                'available_roles': [
                    {'name': '–§—Ä–∏–ª–∞–Ω—Å-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', 'cost': 4000, 'effect': '+15% –∫–∞—á–µ—Å—Ç–≤–æ'},
                    {'name': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞', 'cost': 6000, 'effect': '+20% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'cooldown': '12—á', 'cost': 15000, 'effect': '–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏ + —Ä–∏—Å–∫'},
                    {'name': '–ö—Ä—É–ø–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'cooldown': '48—á', 'cost': 40000, 'effect': '–ë–æ–ª—å—à–æ–π –¥–æ—Ö–æ–¥'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 15,
                'price': 70000
            },
            {
                'id': 113,
                'name': '–¢—ë–º–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂',
                'icon': 'üîÑ',
                'level': 1,
                'income_per_hour': 19000,
                'workers': 3,
                'workload': 85,
                'primary_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂',
                'available_roles': [
                    {'name': 'Arb-bot', 'cost': 15000, 'effect': '+35% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'},
                    {'name': 'Ops', 'cost': 10000, 'effect': '+25% —Å–∫–æ—Ä–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': '–ò–Ω—Å–∞–π–¥–µ—Ä—Å–∫–∏–π –ø–æ—Ç–æ–∫', 'cooldown': '24—á', 'cost': 45000, 'effect': '–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å'},
                    {'name': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ —à–ª—é–∑–∞', 'cooldown': '12—á', 'cost': 20000, 'effect': '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 25,
                'price': 170000
            },
            {
                'id': 114,
                'name': '–ß–∞—Å—Ç–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
                'icon': '‚öîÔ∏è',
                'level': 1,
                'income_per_hour': 28000,
                'workers': 12,
                'workload': 90,
                'primary_action': '–í–∑—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
                'available_roles': [
                    {'name': '–°–æ–ª–¥–∞—Ç', 'cost': 8000, 'effect': '+20% –±–æ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å'},
                    {'name': '–°–Ω–∞–π–ø–µ—Ä', 'cost': 12000, 'effect': '+25% —Ç–æ—á–Ω–æ—Å—Ç—å'},
                    {'name': '–°–ø–µ—Ü–Ω–∞–∑', 'cost': 15000, 'effect': '+30% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
                ],
                'special_modes': [
                    {'name': 'Covert –û–ø–µ—Ä–∞—Ü–∏—è', 'cooldown': '72—á', 'cost': 100000, 'effect': '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ'},
                    {'name': '–ê–ø–≥—Ä–µ–π–¥ —Ç–µ—Ö–Ω–∏–∫–∏', 'cooldown': '48—á', 'cost': 60000, 'effect': '–£–ª—É—á—à–µ–Ω–∏–µ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è'}
                ],
                'upgrade_1': 1, 'upgrade_2': 1, 'upgrade_3': 1, 'upgrade_4': 1, 'upgrade_5': 1,
                'type': 'dark',
                'risk': 40,
                'price': 300000
            }
        ]
    
    def buy_business(self, business_data):
        """–ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞"""
        cost = business_data.get('price', business_data.get('income_per_hour', 0) * 100)
        
        if self.player_balance >= cost:
            new_business = business_data.copy()
            new_business['is_owned'] = True
            new_business['level'] = 1  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            self.my_businesses.append(new_business)
            self.player_balance -= cost
            return True
        return False
    
    def get_total_income(self):
        """–û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å —Å–æ –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤"""
        return sum(business.get('income_per_hour', 0) for business in self.my_businesses)
        
    def upgrade_business(self, business_id, upgrade_type):
        """–£–ª—É—á—à–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
        for business in self.my_businesses:
            if business['id'] == business_id:
                current_level = business.get(f'upgrade_{upgrade_type}', 1)
                if current_level < 5:
                    business[f'upgrade_{upgrade_type}'] = current_level + 1
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è
                    self.apply_upgrade_effect(business, upgrade_type, current_level + 1)
                    return True
        return False
    
    def apply_upgrade_effect(self, business, upgrade_type, new_level):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è"""
        effects = {
            1: {  # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                2: 1.1, 3: 1.25, 4: 1.45, 5: 1.7  # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–æ—Ö–æ–¥–∞
            },
            2: {  # –ö–∞—á–µ—Å—Ç–≤–æ/–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
                2: 1.15, 3: 1.35, 4: 1.6, 5: 2.0  # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–æ—Ö–æ–¥–∞
            },
            3: {  # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
                2: 0.9, 3: 0.75, 4: 0.6, 5: 0.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            },
            4: {  # –ò–Ω–Ω–æ–≤–∞—Ü–∏—è
                2: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏—á–∏ 1",
                3: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏—á–∏ 2", 
                4: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏—á–∏ 3",
                5: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è"
            },
            5: {  # –î–æ–≤–µ—Ä–∏–µ/–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å
                2: 0.8, 3: 0.6, 4: 0.4, 5: 0.2  # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ä–∏—Å–∫–∞/—É–ª—É—á—à–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è
            }
        }
        
        effect = effects[upgrade_type].get(new_level)
        if effect:
            if upgrade_type in [1, 2]:
                business['income_per_hour'] = int(business['income_per_hour'] * effect)
            elif upgrade_type == 3:
                business['workers'] = max(1, int(business['workers'] * effect))
            elif upgrade_type == 4:
                self.unlock_feature(business, effect)
            elif upgrade_type == 5:
                if business['type'] == 'dark':
                    business['risk'] = max(5, int(business.get('risk', 20) * effect))
                else:
                    business['trust_bonus'] = effect  # –ë–æ–Ω—É—Å –∫ –¥–æ–≤–µ—Ä–∏—é
    
    def unlock_feature(self, business, feature):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∏—á –±–∏–∑–Ω–µ—Å–∞"""
        if business['name'] == '–ê–≤—Ç–æ–ø—Ä–æ–º' and 'EV' in feature:
            business['ev_production'] = True
            business['income_per_hour'] = int(business['income_per_hour'] * 1.5)
        elif business['name'] == '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞' and '–±–∏–æ' in feature.lower():
            business['bio_prosthetics'] = True
        elif business['name'] == '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞' and '–Ω–µ–π—Ä–æ' in feature.lower():
            business['neuro_chips'] = True
        elif business['name'] == 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' and '—Å–µ—Ä–≤–µ—Ä' in feature.lower():
            business['servers'] += 1
        elif business['name'] == 'AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' and '–¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä' in feature.lower():
            business['data_center'] = True
            business['income_per_hour'] = int(business['income_per_hour'] * 1.3)
        elif business['name'] == '–¢–µ–Ω–µ–≤–æ–π –º–∞–π–Ω–∏–Ω–≥' and '—Ä–µ–∫—É–ø–µ—Ä–∞—Ü–∏—è' in feature.lower():
            business['heat_recovery'] = True
            business['income_per_hour'] = int(business['income_per_hour'] * 1.2)
        elif business['name'] == '–û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥' and '–¥–æ–≤–µ—Ä–∏–µ' in feature.lower():
            business['trust_level'] += 1
            business['max_launder_amount'] *= 2
    
    def activate_special_mode(self, business, mode_name):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –±–∏–∑–Ω–µ—Å–∞"""
        for mode in business.get('special_modes', []):
            if mode['name'] == mode_name:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
                if '–¥–æ—Ö–æ–¥' in mode['effect'].lower():
                    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
                    pass
                elif '—Ä–∏—Å–∫' in mode['effect'].lower():
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
                    pass
                return True
        return False
    
    def toggle_dark_side(self, business):
        """–ü–µ—Ä–µ–≤–æ–¥ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ —Ç–µ–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É"""
        if business.get('can_go_dark', False) and business['type'] == 'light':
            business['type'] = 'dark'
            business['income_per_hour'] = int(business['income_per_hour'] * 1.8)
            business['risk'] = 25  # –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            self.risk_level += 15
            self.reputation -= 20
            return True
        return False
    
    def calculate_synergy_bonus(self, business1, business2):
        """–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ —Å–∏–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –±–∏–∑–Ω–µ—Å–∞–º–∏"""
        synergies = {
            ('–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞'): 1.3,  # +30% –¥–æ—Ö–æ–¥
            ('AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'IT-—Å—Ç–∞—Ä—Ç–∞–ø'): 1.25,
            ('–ê–≤—Ç–æ–ø—Ä–æ–º', '–£–ì–ú–ö'): 1.2,
            ('–¢—Ä–µ–π–¥–∏–Ω–≥', '–ö—Ä–∏–ø—Ç–æ-–º–∞–π–Ω–∏–Ω–≥'): 1.35
        }
        
        pair = tuple(sorted([business1['name'], business2['name']]))
        return synergies.get(pair, 1.0)

class BusinessMenu(QWidget):
    """–ú–µ–Ω—é –±–∏–∑–Ω–µ—Å–æ–≤ —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—Ä—Ç–æ—á–µ–∫"""
    
    exitToClicker = pyqtSignal()
    exitToMenu = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.business_manager = BusinessManager()
        self.current_filter = "all"
        self.my_businesses_layout = None
        self.catalog_layout = None
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∏—Å–∫–µ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        header_layout = QHBoxLayout()
        
        title = QLabel("üè¢ –ë–∏–∑–Ω–µ—Å –ò–º–ø–µ—Ä–∏—è")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 32px; font-weight: bold;")
        
        risk_label = QLabel(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {self.business_manager.risk_level}%")
        risk_label.setStyleSheet(f"color: {'#ef4444' if self.business_manager.risk_level > 50 else '#f59e0b'}; font-size: 14px;")
        
        reputation_label = QLabel(f"‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: {self.business_manager.reputation}")
        reputation_label.setStyleSheet(f"color: {ACCENT2.name()}; font-size: 14px;")
        
        crypto_label = QLabel(f"‚Çø –ö—Ä–∏–ø—Ç–æ: {self.business_manager.crypto_balance:,}")
        crypto_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
        
        header_layout.addWidget(title)
        header_layout.addStretch()
        header_layout.addWidget(risk_label)
        header_layout.addWidget(reputation_label)
        header_layout.addWidget(crypto_label)
        
        layout.addLayout(header_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = AnimatedButton("üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_btn.clicked.connect(self.exitToClicker.emit)
        layout.addWidget(back_btn)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet(f"""
            QTabWidget::pane {{
                border: 2px solid {PURPLE_PRIMARY.name()};
                border-radius: 10px;
                background-color: {PANEL_BG.name()};
            }}
            QTabBar::tab {{
                background-color: {DEEP_PURPLE.name()};
                color: {TEXT_PRIMARY.name()};
                padding: 10px 20px;
                border: 1px solid {PURPLE_PRIMARY.name()};
                border-radius: 5px;
                margin-right: 2px;
            }}
            QTabBar::tab:selected {{
                background-color: {PURPLE_PRIMARY.name()};
            }}
            QTabBar::tab:hover {{
                background-color: {PURPLE_ACCENT.name()};
            }}
        """)
        
        # –ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã
        my_businesses_tab = self.create_my_businesses_tab()
        self.tab_widget.addTab(my_businesses_tab, "üíº –ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã")
        
        # –ö–∞—Ç–∞–ª–æ–≥ –±–∏–∑–Ω–µ—Å–æ–≤
        catalog_tab = self.create_catalog_tab()
        self.tab_widget.addTab(catalog_tab, "üìã –ö–∞—Ç–∞–ª–æ–≥")
        
        layout.addWidget(self.tab_widget)
        self.setLayout(layout)
        
    def create_my_businesses_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è widget
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –º–æ–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤
        filter_layout = QHBoxLayout()
        
        filter_group = QButtonGroup()
        filters = [
            ("üîç –í—Å–µ –º–æ–∏ –±–∏–∑–Ω–µ—Å—ã", "all"),
            ("üí° –°–≤–µ—Ç–ª—ã–µ", "light"),
            ("üåë –¢–µ–º–Ω—ã–µ", "dark")
        ]
        
        for text, filter_type in filters:
            btn = QRadioButton(text)
            btn.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 14px; padding: 5px;")
            btn.toggled.connect(lambda checked, ft=filter_type: self.filter_my_businesses(ft))
            filter_group.addButton(btn)
            filter_layout.addWidget(btn)
            if filter_type == "all":
                btn.setChecked(True)
        
        filter_layout.addStretch()
        layout.addLayout(filter_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_widget = self.create_stats_widget()
        layout.addWidget(stats_widget)
        
        # –°–µ—Ç–∫–∞ –º–æ–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤
        self.my_businesses_scroll = QScrollArea()
        self.my_businesses_scroll.setWidgetResizable(True)
        self.my_businesses_scroll.setStyleSheet("QScrollArea { border: none; background: transparent; }")
        
        self.my_businesses_container = QWidget()
        self.my_businesses_layout = QGridLayout(self.my_businesses_container)
        self.my_businesses_layout.setSpacing(15)
        self.my_businesses_scroll.setWidget(self.my_businesses_container)
        
        layout.addWidget(self.my_businesses_scroll)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–∏ –±–∏–∑–Ω–µ—Å—ã
        self.load_my_businesses()
        
        return widget
        
    def create_catalog_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è widget
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
        filter_layout = QHBoxLayout()
        
        filter_group = QButtonGroup()
        filters = [
            ("üîç –í—Å–µ –±–∏–∑–Ω–µ—Å—ã", "all"),
            ("üí° –°–≤–µ—Ç–ª—ã–µ –±–∏–∑–Ω–µ—Å—ã", "light"),
            ("üåë –¢–µ–º–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã", "dark")
        ]
        
        for text, filter_type in filters:
            btn = QRadioButton(text)
            btn.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 14px; padding: 5px;")
            btn.toggled.connect(lambda checked, ft=filter_type: self.filter_catalog(ft))
            filter_group.addButton(btn)
            filter_layout.addWidget(btn)
            if filter_type == "all":
                btn.setChecked(True)
        
        filter_layout.addStretch()
        layout.addLayout(filter_layout)
        
        # –°–µ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        self.catalog_scroll = QScrollArea()
        self.catalog_scroll.setWidgetResizable(True)
        self.catalog_scroll.setStyleSheet("QScrollArea { border: none; background: transparent; }")
        
        self.catalog_container = QWidget()
        self.catalog_layout = QGridLayout(self.catalog_container)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout
        self.catalog_layout.setSpacing(15)
        self.catalog_scroll.setWidget(self.catalog_container)
        
        layout.addWidget(self.catalog_scroll)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        self.load_catalog()
        
        return widget
        
    def create_stats_widget(self):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background-color: {PANEL_BG.name()};
                border: 2px solid {PURPLE_ACCENT.name()};
                border-radius: 10px;
                padding: 15px;
            }}
        """)
        
        layout = QHBoxLayout()
        
        total_income = sum(business.get('income_per_hour', 0) for business in self.business_manager.my_businesses)
        total_workers = sum(business.get('workers', 0) for business in self.business_manager.my_businesses)
        
        stats = [
            ("üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥/—á–∞—Å", f"${total_income:,}"),
            ("üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤", str(len(self.business_manager.my_businesses))),
            ("üë• –í—Å–µ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤", str(total_workers)),
            ("üìà –£—Ä–æ–≤–µ–Ω—å –∏–º–ø–µ—Ä–∏–∏", "3")
        ]
        
        for name, value in stats:
            stat_layout = QVBoxLayout()
            name_label = QLabel(name)
            name_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 12px;")
            value_label = QLabel(value)
            value_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 16px; font-weight: bold;")
            
            stat_layout.addWidget(name_label)
            stat_layout.addWidget(value_label)
            layout.addLayout(stat_layout)
            layout.addSpacing(20)
        
        widget.setLayout(layout)
        return widget
        
    def create_business_card(self, business_data, is_owned=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–∏–∑–Ω–µ—Å–∞"""
        card = QFrame()
        is_dark = business_data.get('type') == 'dark'
        
        card_style = f"""
            QFrame {{
                background-color: {CARD_BG.name()};
                border: 2px solid {'#ef4444' if is_dark else PURPLE_PRIMARY.name()};
                border-radius: 15px;
                padding: 20px;
            }}
        """
        card.setStyleSheet(card_style)
        
        if is_owned:
            card.setFixedSize(600, 750)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        else:
            card.setFixedSize(450, 400)

        layout = QVBoxLayout()
        card.setLayout(layout)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        
        header_layout = QHBoxLayout()
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_layout = QHBoxLayout()
        icon_label = QLabel(business_data.get('icon', 'üè¢'))
        icon_label.setStyleSheet("font-size: 20px;")
        title_label = QLabel(business_data['name'])
        title_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 18px; font-weight: bold;")
        
        title_layout.addWidget(icon_label)
        title_layout.addWidget(title_label)
        title_layout.addStretch()
        
        # –£—Ä–æ–≤–µ–Ω—å –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        level_label = QLabel(f"–£—Ä. {business_data.get('level', 1)}")
        level_label.setStyleSheet(f"color: {ACCENT2.name()}; font-size: 14px; font-weight: bold;")
        
        header_layout.addLayout(title_layout)
        header_layout.addWidget(level_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        if business_data.get('ev_production'):
            ev_label = QLabel("‚ö° EV")
            ev_label.setStyleSheet("color: #22c55e; font-size: 12px;")
            header_layout.addWidget(ev_label)
        
        if business_data.get('bio_prosthetics'):
            bio_label = QLabel("ü¶ø –ë–∏–æ")
            bio_label.setStyleSheet("color: #3b82f6; font-size: 12px;")
            header_layout.addWidget(bio_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∏—Å–∫–∞ –¥–ª—è —Ç–µ–º–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
        if is_dark:
            risk_label = QLabel("‚ö†Ô∏è –†–∏—Å–∫")
            risk_label.setStyleSheet("color: #ef4444; font-size: 12px;")
            header_layout.addWidget(risk_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º header_layout –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑
        layout.addLayout(header_layout)
        
        # –ü–∞–Ω–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        stats_layout = QVBoxLayout()
        stats_layout.setSpacing(5)
        
        income_label = QLabel(f"üí∞ –î–æ—Ö–æ–¥/—á–∞—Å: ${business_data.get('income_per_hour', 0):,}")
        income_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
        
        workers_label = QLabel(f"üë• –†–∞–±–æ—Ç–Ω–∏–∫–∏: {business_data.get('workers', 0)}")
        workers_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
        
        if 'workload' in business_data:
            workload_label = QLabel(f"üìä –ù–∞–≥—Ä—É–∑–∫–∞: {business_data['workload']}%")
            workload_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
            stats_layout.addWidget(workload_label)
        
        stats_layout.addWidget(income_label)
        stats_layout.addWidget(workers_label)
        layout.addLayout(stats_layout)
        layout.addSpacing(10)
        
        # –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
        primary_action_layout = QHBoxLayout()
        
        if is_owned:
            primary_btn = AnimatedButton(business_data['primary_action'])
            primary_btn.setFixedHeight(40)
            primary_btn.clicked.connect(lambda: self.handle_primary_action(business_data))
            primary_action_layout.addWidget(primary_btn)
            
            # –í—Ç–æ—Ä–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            secondary_layout = QVBoxLayout()
            
            hire_btn = AnimatedButton("üë• –ù–∞–π–º")
            hire_btn.setFixedHeight(40)
            hire_btn.clicked.connect(lambda: self.show_hire_dialog(business_data))
            
            upgrade_btn = AnimatedButton("‚ö° –£–ª—É—á—à–∏—Ç—å")
            upgrade_btn.setFixedHeight(40)
            upgrade_btn.clicked.connect(lambda: self.show_upgrades(business_data))
            
            secondary_layout.addWidget(hire_btn)
            secondary_layout.addWidget(upgrade_btn)
            primary_action_layout.addLayout(secondary_layout)
        else:
            # –î–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ - –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
            buy_btn = AnimatedButton(f"–ö—É–ø–∏—Ç—å –∑–∞ ${business_data.get('income_per_hour', 0) * 100:,}")
            buy_btn.setFixedHeight(40)
            buy_btn.clicked.connect(lambda: self.buy_business(business_data))
            primary_action_layout.addWidget(buy_btn)
        
        layout.addLayout(primary_action_layout)
        
        # –ü–∞–Ω–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è owned)
        if is_owned and 'special_modes' in business_data:
            special_layout = QVBoxLayout()
            special_label = QLabel("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
            special_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 12px;")
            special_layout.addWidget(special_label)
            
            for mode in business_data['special_modes']:
                mode_btn = AnimatedButton(mode['name'])
                mode_btn.setFixedHeight(35)
                if 'cooldown' in mode:
                    mode_btn.setToolTip(f"–ö—É–ª–¥–∞—É–Ω: {mode['cooldown']}")
                mode_btn.clicked.connect(lambda checked, m=mode, b=business_data: self.activate_special_mode(m, b))
                special_layout.addWidget(mode_btn)
            
            layout.addLayout(special_layout)
        
        # –ü–∞–Ω–µ–ª—å –∞–ø–≥—Ä–µ–π–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è owned)
        if is_owned:
            upgrades_label = QLabel("–£–ª—É—á—à–µ–Ω–∏—è:")
            upgrades_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 12px;")
            layout.addWidget(upgrades_label)
            
            upgrades_layout = QHBoxLayout()
            
            upgrade_types = [
                ("‚ö°", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
                ("üéØ", "–ö–∞—á–µ—Å—Ç–≤–æ"), 
                ("ü§ñ", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"),
                ("üí°", "–ò–Ω–Ω–æ–≤–∞—Ü–∏—è"),
                ("üõ°Ô∏è", "–î–æ–≤–µ—Ä–∏–µ" if not is_dark else "–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å")
            ]
            
            for i, (icon, name) in enumerate(upgrade_types, 1):
                upgrade_btn = QPushButton(f"{icon} {i}")
                upgrade_btn.setFixedSize(50, 50)
                upgrade_btn.setStyleSheet(f"""
                    QPushButton {{
                        background-color: {PANEL_BG.name()};
                        border: 2px solid {PURPLE_PRIMARY.name()};
                        border-radius: 8px;
                        color: {TEXT_PRIMARY.name()};
                        font-size: 10px;
                    }}
                    QPushButton:hover {{
                        background-color: {PURPLE_PRIMARY.name()};
                    }}
                """)
                current_level = business_data.get(f'upgrade_{i}', 1)
                upgrade_btn.setToolTip(f"{name}\n–£—Ä–æ–≤–µ–Ω—å: {current_level}")
                upgrade_btn.clicked.connect(lambda checked, idx=i, b=business_data: self.upgrade_business(b, idx))
                upgrades_layout.addWidget(upgrade_btn)
            
            layout.addLayout(upgrades_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ç–µ–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤)
        if is_owned and business_data.get('can_go_dark', False) and not is_dark:
            dark_btn = AnimatedButton("üåë –ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–µ–Ω—å")
            dark_btn.setStyleSheet("background-color: #7f1d1d; color: white;")
            dark_btn.clicked.connect(lambda: self.toggle_dark_side(business_data))
            layout.addWidget(dark_btn)
        
        layout.addStretch()
        return card
        
    def handle_ev_production(self, business_data):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π"""
        if business_data.get('ev_production', False):
            QMessageBox.information(self, "EV –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", 
                                  "–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π!\n–î–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 50%")
        else:
            QMessageBox.warning(self, "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ", 
                              "–î–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ EV –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–µ–Ω–∏–µ '–ò–Ω–Ω–æ–≤–∞—Ü–∏—è' —É—Ä–æ–≤–Ω—è 4")
            
    def load_my_businesses(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ layout
        if self.my_businesses_layout is None:
            print("–û—à–∏–±–∫–∞: my_businesses_layout –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ layout
        self.clear_layout(self.my_businesses_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–∑–Ω–µ—Å—ã
        row, col = 0, 0
        max_cols = 2
        
        for business_data in self.business_manager.my_businesses:
            card = self.create_business_card(business_data, is_owned=True)
            self.my_businesses_layout.addWidget(card, row, col)
            
            col += 1
            if col >= max_cols:
                col = 0
                row += 1
                
        # –ï—Å–ª–∏ –±–∏–∑–Ω–µ—Å–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not self.business_manager.my_businesses:
            no_business_label = QLabel("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤. –ü–æ—Å–µ—Ç–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            no_business_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 16px; text-align: center;")
            no_business_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.my_businesses_layout.addWidget(no_business_label, 0, 0, 1, max_cols)

    def clear_layout(self, layout):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ layout"""
        if layout is None:
            return
            
        while layout.count():
            item = layout.takeAt(0)
            if item is None:
                continue
                
            widget = item.widget()
            if widget is not None:
                # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–∂–µ—Ç - —É–¥–∞–ª—è–µ–º –µ–≥–æ
                widget.deleteLater()
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π layout - –æ—á–∏—â–∞–µ–º –µ–≥–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                nested_layout = item.layout()
                if nested_layout is not None:
                    self.clear_layout(nested_layout)
                    # –£–¥–∞–ª—è–µ–º —Å–∞–º layout
                    nested_layout.deleteLater()
        
    def handle_crypto_trading(self, business_data):
        """–ó–∞–ø—É—Å–∫ –∫—Ä–∏–ø—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
        if business_data['name'] == '–¢—Ä–µ–π–¥–∏–Ω–≥':
            dialog = QDialog(self)
            dialog.setWindowTitle("–ö—Ä–∏–ø—Ç–æ –¢—Ä–µ–π–¥–∏–Ω–≥")
            dialog.setFixedSize(300, 200)
            
            layout = QVBoxLayout(dialog)
            
            amount_label = QLabel("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∑–µ—Ä–≤:")
            amount_slider = QSlider(Qt.Orientation.Horizontal)
            amount_slider.setRange(10, 100)  # 10% - 100%
            amount_slider.setValue(int(business_data.get('crypto_reserve_usage', 0.1) * 100))
            
            layout.addWidget(amount_label)
            layout.addWidget(amount_slider)
            layout.addWidget(QLabel(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {amount_slider.value()}%"))
            
            confirm_btn = AnimatedButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
            confirm_btn.clicked.connect(dialog.accept)
            layout.addWidget(confirm_btn)
            
            dialog.exec()

    def show_synergy_info(self, business_data):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω–µ—Ä–≥–∏—è—Ö"""
        synergies = business_data.get('synergies', [])
        if synergies:
            synergy_text = "–°–∏–Ω–µ—Ä–≥–∏–∏ —Å:\n" + "\n".join(f"‚Ä¢ {synergy}" for synergy in synergies)
            QMessageBox.information(self, "–°–∏–Ω–µ—Ä–≥–∏–∏", synergy_text)

    def load_catalog(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –±–∏–∑–Ω–µ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ layout
        if self.catalog_layout is None:
            return
            
        # –û—á–∏—â–∞–µ–º layout - –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.clear_layout(self.catalog_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–∑–Ω–µ—Å—ã
        row, col = 0, 0
        max_cols = 2
        
        for business_data in self.business_manager.business_data:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã
            if any(b['id'] == business_data['id'] for b in self.business_manager.my_businesses):
                continue
                
            card = self.create_business_card(business_data, is_owned=False)
            self.catalog_layout.addWidget(card, row, col)
            
            col += 1
            if col >= max_cols:
                col = 0
                row += 1
        
    def filter_my_businesses(self, filter_type):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤"""
        self.current_filter = filter_type
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º, –µ—Å–ª–∏ layout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if self.my_businesses_layout is not None:
            self.load_my_businesses()
        
    def filter_catalog(self, filter_type):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
        self.current_filter = filter_type
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º, –µ—Å–ª–∏ layout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if self.catalog_layout is not None:
            self.load_catalog()
        
    def handle_primary_action(self, business_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞"""
        business_name = business_data['name']
        
        if business_name == '–¢—Ä–µ–π–¥–∏–Ω–≥':
            self.handle_crypto_trading(business_data)
        elif business_name == '–ê–≤—Ç–æ–ø—Ä–æ–º':
            self.handle_ev_production(business_data)
        elif business_name in ['–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞']:
            self.handle_research_development(business_data)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
            QMessageBox.information(self, "–î–µ–π—Å—Ç–≤–∏–µ", 
                                f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {business_data['primary_action']}\n"
                                f"–î–æ—Ö–æ–¥: ${business_data.get('income_per_hour', 0):,}")
            
    def handle_research_development(self, business_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫"""
        dialog = QDialog(self)
        dialog.setWindowTitle(f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - {business_data['name']}")
        dialog.setFixedSize(400, 300)
        
        layout = QVBoxLayout(dialog)
        
        research_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:")
        research_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 16px;")
        layout.addWidget(research_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–∑–Ω–µ—Å–∞
        if business_data['name'] == '–ë–∏–æ—Ç–µ—Ö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è':
            options = ["–ì–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞", "–ë–∏–æ–ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"]
        else:  # –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞
            options = ["AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–ë–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞", "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"]
        
        for option in options:
            btn = AnimatedButton(option)
            btn.clicked.connect(lambda checked, o=option: self.start_research(business_data, o))
            layout.addWidget(btn)
        
        dialog.exec()

    def start_research(self, business_data, research_type):
        """–ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        QMessageBox.information(self, "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", 
                            f"–ó–∞–ø—É—â–µ–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {research_type}\n"
                            f"–ë–∏–∑–Ω–µ—Å: {business_data['name']}")
        
    def show_hire_dialog(self, business_data):
        """–î–∏–∞–ª–æ–≥ –Ω–∞–π–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        dialog = QDialog(self)
        dialog.setWindowTitle(f"–ù–∞–π–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ - {business_data['name']}")
        dialog.setFixedSize(300, 400)
        dialog.setStyleSheet(f"background-color: {PANEL_BG.name()}; color: {TEXT_PRIMARY.name()};")
        
        layout = QVBoxLayout(dialog)
        
        roles_label = QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:")
        roles_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 16px; font-weight: bold;")
        layout.addWidget(roles_label)
        
        roles = business_data.get('available_roles', [])
        for role in roles:
            role_frame = QFrame()
            role_frame.setStyleSheet(f"border: 1px solid {PURPLE_PRIMARY.name()}; border-radius: 5px; padding: 10px; margin: 5px;")
            role_layout = QHBoxLayout(role_frame)
            
            role_name = QLabel(f"{role['name']} - ${role['cost']:,}")
            role_name.setStyleSheet(f"color: {TEXT_PRIMARY.name()};")
            
            hire_btn = AnimatedButton("–ù–∞–Ω—è—Ç—å")
            hire_btn.setFixedSize(80, 30)
            hire_btn.clicked.connect(lambda checked, r=role: self.hire_employee(r, business_data))
            
            role_layout.addWidget(role_name)
            role_layout.addStretch()
            role_layout.addWidget(hire_btn)
            layout.addWidget(role_frame)
        
        # –ß–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ–Ω–∞–π–º–∞
        auto_hire = QCheckBox("–ê–≤—Ç–æ–Ω–∞—ë–º")
        auto_hire.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; padding: 10px;")
        layout.addWidget(auto_hire)
        
        dialog.exec()
        
    def hire_employee(self, role, business_data):
        """–ù–∞–Ω—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        QMessageBox.information(self, "–ù–∞–π–º", f"–ù–∞–Ω—è—Ç: {role['name']}")
        
    def show_upgrades(self, business_data):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è"""
        QMessageBox.information(self, "–£–ª—É—á—à–µ–Ω–∏—è", f"–û—Ç–∫—Ä—ã—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è {business_data['name']}")
        
    def activate_special_mode(self, mode, business_data):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"""
        QMessageBox.information(self, "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º", f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {mode['name']}")
        
    def upgrade_business(self, business_data, upgrade_type):
        """–£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        upgrade_cost = self.calculate_upgrade_cost(business_data, upgrade_type)
        current_level = business_data.get(f'upgrade_{upgrade_type}', 1)
        
        if current_level >= 5:
            QMessageBox.information(self, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", 
                                "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
        if self.business_manager.player_balance >= upgrade_cost:
            if self.business_manager.upgrade_business(business_data['id'], upgrade_type):
                QMessageBox.information(self, "–£–ª—É—á—à–µ–Ω–∏–µ", 
                                    f"–ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–µ–Ω! –£—Ä–æ–≤–µ–Ω—å {upgrade_type} –ø–æ–≤—ã—à–µ–Ω –¥–æ {current_level + 1}.")
                self.load_my_businesses()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å")
        else:
            QMessageBox.warning(self, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", 
                            f"–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ ${upgrade_cost:,}")
            
    def calculate_upgrade_cost(self, business_data, upgrade_type):
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è"""
        base_cost = business_data.get('income_per_hour', 1000)
        current_level = business_data.get(f'upgrade_{upgrade_type}', 1)
        return base_cost * (2 ** current_level)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    def auto_update_businesses(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–≤"""
        for business in self.business_manager.my_businesses:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥
            self.add_passive_income(business)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
            self.update_business_state(business)

    def update_business_state(self, business):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ (–Ω–∞–≥—Ä—É–∑–∫–∞, —Ä–∏—Å–∫ –∏ —Ç.–¥.)"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        if 'workload' in business:
            business['workload'] = min(100, business['workload'] + random.randint(1, 5))
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫ –¥–ª—è —Ç–µ–º–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
        if business.get('type') == 'dark':
            business['risk'] = min(95, business.get('risk', 20) + random.randint(1, 3))

    def add_passive_income(self, business):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –±–∏–∑–Ω–µ—Å–∞"""
        income = business.get('income_per_hour', 0) / 3600  # –î–æ—Ö–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—É
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ –±–∞–ª–∞–Ω—Å—É –∏–≥—Ä–æ–∫–∞
        # self.business_manager.player_balance += income
            
    def toggle_dark_side(self, business_data):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É"""
        reply = QMessageBox.question(self, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¢–µ–Ω—å", 
                                   "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å –Ω–∞ —Ç–µ–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É?\n"
                                   "–≠—Ç–æ –¥–∞—Å—Ç –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–∞, –Ω–æ —É–≤–µ–ª–∏—á–∏—Ç —Ä–∏—Å–∫–∏.")
        if reply == QMessageBox.StandardButton.Yes:
            business_data['type'] = 'dark'
            business_data['income_per_hour'] = int(business_data['income_per_hour'] * 1.5)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Ç–µ–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É! –î–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω.")
            self.load_my_businesses()
            
    def buy_business(self, business_data):
        """–ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞"""
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö)
        cost = business_data.get('price', business_data.get('income_per_hour', 0) * 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
        player_balance = 1000000000000  # –ó–∞–≥–ª—É—à–∫–∞ - –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å—Å—è –∏–∑ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏
        
        if player_balance >= cost:
            if self.business_manager.buy_business(business_data):
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å –±–∞–ª–∞–Ω—Å–∞
                QMessageBox.information(self, "–ü–æ–∫—É–ø–∫–∞", 
                                    f"–ë–∏–∑–Ω–µ—Å '{business_data['name']}' —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∑–∞ ${cost:,}!")
                self.load_catalog()
                self.load_my_businesses()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å")
        else:
            QMessageBox.warning(self, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", 
                            f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–æ ${cost:,}, –∞ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ ${player_balance:,}")
        
    def keyPressEvent(self, a0: QKeyEvent | None):
        if a0 is not None and a0.key() == Qt.Key.Key_Escape:
            self.exitToMenu.emit()
        else:
            super().keyPressEvent(a0)

class ProfileMenu(QWidget):
    """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    
    exitToClicker = pyqtSignal()
    exitToMenu = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ò–≥—Ä–æ–∫–∞")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 32px; font-weight: bold;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = AnimatedButton("üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_btn.clicked.connect(self.exitToClicker.emit)
        layout.addWidget(back_btn)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_widget = self.create_profile_info()
        layout.addWidget(info_widget)
        
        layout.addSpacing(20)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_widget = self.create_stats_widget()
        layout.addWidget(stats_widget)
        
        layout.addSpacing(20)
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_widget = self.create_achievements_widget()
        layout.addWidget(achievements_widget)
        
        layout.addStretch()
        
        self.setLayout(layout)
        
    def create_profile_info(self):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background-color: {PANEL_BG.name()};
                border: 2px solid {PURPLE_PRIMARY.name()};
                border-radius: 15px;
                padding: 20px;
            }}
        """)
        
        layout = QHBoxLayout()
        
        # –ê–≤–∞—Ç–∞—Ä
        avatar = QLabel("üëë")
        avatar.setStyleSheet("font-size: 64px;")
        avatar.setAlignment(Qt.AlignmentFlag.AlignCenter)
        avatar.setFixedSize(100, 100)
        layout.addWidget(avatar)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_layout = QVBoxLayout()
        
        name_label = QLabel("–ò–≥—Ä–æ–∫123")
        name_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 24px; font-weight: bold;")
        
        level_label = QLabel("–£—Ä–æ–≤–µ–Ω—å: 15")
        level_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 16px;")
        
        balance_label = QLabel("–ë–∞–ª–∞–Ω—Å: $1,250,000")
        balance_label.setStyleSheet(f"color: {ACCENT2.name()}; font-size: 18px; font-weight: bold;")
        
        info_layout.addWidget(name_label)
        info_layout.addWidget(level_label)
        info_layout.addWidget(balance_label)
        layout.addLayout(info_layout)
        
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_layout = QVBoxLayout()
        
        daily_btn = AnimatedButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞")
        upgrade_btn = AnimatedButton("‚ö° –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        
        action_layout.addWidget(daily_btn)
        action_layout.addWidget(upgrade_btn)
        layout.addLayout(action_layout)
        
        widget.setLayout(layout)
        return widget
        
    def create_stats_widget(self):
        widget = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        widget.setStyleSheet(f"""
            QGroupBox {{
                color: {TEXT_PRIMARY.name()};
                font-size: 20px;
                font-weight: bold;
                border: 2px solid {PURPLE_ACCENT.name()};
                border-radius: 10px;
                margin-top: 10px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }}
        """)
        
        layout = QGridLayout()
        
        stats = [
            ("üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:", "$5,250,000"),
            ("üéØ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤:", "125,430"),
            ("üè™ –ë–∏–∑–Ω–µ—Å–æ–≤:", "8"),
            ("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:", "12"),
            ("üõí –ü–æ–∫—É–ø–æ–∫:", "25"),
            ("‚è±Ô∏è –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ:", "45—á 30–º")
        ]
        
        row, col = 0, 0
        for name, value in stats:
            name_label = QLabel(name)
            name_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
            
            value_label = QLabel(value)
            value_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 14px; font-weight: bold;")
            
            layout.addWidget(name_label, row, col * 2)
            layout.addWidget(value_label, row, col * 2 + 1)
            
            col += 1
            if col >= 2:
                col = 0
                row += 1
        
        widget.setLayout(layout)
        return widget
        
    def create_achievements_widget(self):
        widget = QGroupBox("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        widget.setStyleSheet(f"""
            QGroupBox {{
                color: {TEXT_PRIMARY.name()};
                font-size: 20px;
                font-weight: bold;
                border: 2px solid {PURPLE_ACCENT.name()};
                border-radius: 10px;
                margin-top: 10px;
            }}
        """)
        
        layout = QVBoxLayout()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        progress_layout = QHBoxLayout()
        
        progress = QProgressBar()
        progress.setValue(65)
        progress.setStyleSheet(f"""
            QProgressBar {{
                border: 2px solid {PURPLE_PRIMARY.name()};
                border-radius: 10px;
                text-align: center;
                background-color: {DARK_BG.name()};
            }}
            QProgressBar::chunk {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {ACCENT1.name()}, stop:1 {ACCENT2.name()});
                border-radius: 8px;
            }}
        """)
        
        progress_text = QLabel("15/20 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (65%)")
        progress_text.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 14px;")
        
        progress_layout.addWidget(progress)
        progress_layout.addWidget(progress_text)
        layout.addLayout(progress_layout)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievements = [
            ("üí∞ –ü–µ—Ä–≤—ã–µ –¥–µ–Ω—å–≥–∏", "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $1,000", True),
            ("üè™ –ë–∏–∑–Ω–µ—Å–º–µ–Ω", "–ö—É–ø–∏—Ç—å –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å", True),
            ("üìà –ò–Ω–≤–µ—Å—Ç–æ—Ä", "–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é", True),
            ("üöÄ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä", "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $1,000,000", True),
            ("üëë –ò–º–ø–µ—Ä–∏—è", "–ò–º–µ—Ç—å 10 –±–∏–∑–Ω–µ—Å–æ–≤", False)
        ]
        
        for name, desc, completed in achievements:
            achievement_widget = self.create_achievement_item(name, desc, completed)
            layout.addWidget(achievement_widget)
        
        widget.setLayout(layout)
        return widget
        
    def create_achievement_item(self, name, description, completed):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background-color: {CARD_BG.name()};
                border: 1px solid {'#22c55e' if completed else PURPLE_PRIMARY.name()};
                border-radius: 8px;
                padding: 10px;
                margin: 2px;
            }}
        """)
        
        layout = QHBoxLayout()
        
        # –°—Ç–∞—Ç—É—Å
        status = QLabel("‚úÖ" if completed else "‚è≥")
        status.setStyleSheet("font-size: 16px;")
        layout.addWidget(status)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_layout = QVBoxLayout()
        
        name_label = QLabel(name)
        name_label.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 14px; font-weight: bold;")
        
        desc_label = QLabel(description)
        desc_label.setStyleSheet(f"color: {TEXT_SECONDARY.name()}; font-size: 12px;")
        
        info_layout.addWidget(name_label)
        info_layout.addWidget(desc_label)
        layout.addLayout(info_layout)
        
        widget.setLayout(layout)
        return widget
        
    def keyPressEvent(self, a0: QKeyEvent | None):
        if a0 is not None and  a0.key() == Qt.Key.Key_Escape:
            self.exitToMenu.emit()
        else:
            super().keyPressEvent(a0)

class SettingsMenu(QWidget):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    exitToMenu = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.settings_manager = Settings()
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        title.setStyleSheet(f"color: {TEXT_PRIMARY.name()}; font-size: 32px; font-weight: bold;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = AnimatedButton("üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        back_btn.clicked.connect(self.exitToMenu.emit)
        layout.addWidget(back_btn)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_widget = self.create_settings_widget()
        layout.addWidget(settings_widget)
        
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        apply_btn = AnimatedButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        apply_btn.clicked.connect(self.apply_settings)
        
        reset_btn = AnimatedButton("–°–±—Ä–æ—Å–∏—Ç—å")
        reset_btn.clicked.connect(self.reset_settings)
        
        button_layout.addWidget(apply_btn)
        button_layout.addWidget(reset_btn)
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
    def create_settings_widget(self):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background-color: {PANEL_BG.name()};
                border: 2px solid {PURPLE_PRIMARY.name()};
                border-radius: 15px;
                padding: 20px;
            }}
        """)

        layout = QFormLayout()
        layout.setLabelAlignment(Qt.AlignmentFlag.AlignLeft)
        layout.setVerticalSpacing(20)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –û–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö ComboBox —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —à–∏—Ä–∏–Ω—ã
        combo_style = f"""
            QComboBox {{
                background-color: {DARK_BG.name()};
                color: {TEXT_PRIMARY.name()};
                border: 1px solid {PURPLE_PRIMARY.name()};
                border-radius: 8px;
                padding: 10px;
                margin-top: 9px;
                min-width: 400px;           /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */
                max-width: 450px;           /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */
            }}
            QComboBox:hover {{
                border: 1px solid {LIGHT_PURPLE.name()};
            }}
            QComboBox::drop-down {{
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 25px;
                border-left: 1px solid {PURPLE_PRIMARY.name()};
                border-top-right-radius: 8px;
                border-bottom-right-radius: 8px;
            }}
            QComboBox::down-arrow {{
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid {LIGHT_PURPLE.name()};
                width: 0px;
                height: 0px;
            }}
            QComboBox QAbstractItemView {{
                background-color: {DARK_BG.name()};
                border: 1px solid {PURPLE_ACCENT.name()};
                border-radius: 8px;
                padding: 5px;
                outline: none;
                min-width: 400px;           /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ */
                max-width: 450px;           /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ */
            }}
            QComboBox QAbstractItemView::item {{
                color: {TEXT_PRIMARY.name()};
                background-color: transparent;
                padding: 8px 12px;
                border-radius: 4px;
                margin: 2px;
            }}
            QComboBox QAbstractItemView::item:selected {{
                background-color: {PURPLE_PRIMARY.name()};
                color: white;
            }}
            QComboBox QAbstractItemView::item:hover {{
                background-color: {PURPLE_ACCENT.name()};
                color: white;
            }}
        """
        
        # –¢–µ–º–∞
        theme_combo = QComboBox()
        theme_combo.addItems(self.settings_manager.show_themes())
        theme_combo.setStyleSheet(combo_style)
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–±–æ–±–æ–∫—Å–∞
        theme_combo.setFixedWidth(250)  # –®–∏—Ä–∏–Ω–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        layout.addRow("üé® –¢–µ–º–∞:", theme_combo)
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        resolution_combo = QComboBox()
        resolutions = [f"{w}x{h}" for w, h in self.settings_manager.show_window_sizes()]
        resolution_combo.addItems(resolutions)
        resolution_combo.setStyleSheet(combo_style)
        resolution_combo.setFixedWidth(250)
        layout.addRow("üñ•Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", resolution_combo)
        
        # FPS
        fps_combo = QComboBox()
        fps_combo.addItems([f"{fps} FPS" for fps in self.settings_manager.show_fps()])
        fps_combo.setStyleSheet(combo_style)
        fps_combo.setFixedWidth(250)
        layout.addRow("üéØ FPS:", fps_combo)
        
        # –Ø–∑—ã–∫
        language_combo = QComboBox()
        language_combo.addItems(self.settings_manager.show_langs())
        language_combo.setStyleSheet(combo_style)
        language_combo.setFixedWidth(250)
        layout.addRow("üåê –Ø–∑—ã–∫:", language_combo)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–∏
        quality_combo = QComboBox()
        quality_combo.addItems(["–ù–∏–∑–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–í—ã—Å–æ–∫–æ–µ", "–£–ª—å—Ç—Ä–∞"])
        quality_combo.setStyleSheet(combo_style)
        quality_combo.setFixedWidth(250)
        layout.addRow("üé® –ö–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–∏:", quality_combo)
        
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º—ã
        volume_slider = QSlider(Qt.Orientation.Horizontal)
        volume_slider.setRange(0, 100)
        volume_slider.setValue(80)
        
        # –ù–ê–°–¢–†–û–ô–ö–ò –†–ê–ó–ú–ï–†–ê
        volume_slider.setFixedWidth(400)  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
        volume_slider.setMinimumHeight(40)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        
        # –°—Ç–∏–ª—å –ø–æ–ª–∑—É–Ω–∫–∞
        volume_slider.setStyleSheet(f"""
            QSlider::groove:horizontal {{
                border: 2px solid {PURPLE_PRIMARY.name()};
                height: 15px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {DARK_BG.name()}, stop:0.3 {DEEP_PURPLE.name()}, stop:1 {PURPLE_PRIMARY.name()});
                border-radius: 7px;
            }}
            QSlider::handle:horizontal {{
                background: qradialgradient(cx:0.5, cy:0.5, radius:0.8,
                    stop:0 white, stop:0.6 {LIGHT_PURPLE.name()}, stop:1 {PURPLE_ACCENT.name()});
                border: 2px solid white;
                width: 28px;
                height: 28px;
                margin: -8px 0;
                border-radius: 14px;
            }}
            QSlider::sub-page:horizontal {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {ACCENT1.name()}, stop:0.5 {PURPLE_ACCENT.name()}, stop:1 {ACCENT2.name()});
                border-radius: 7px;
            }}
        """)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
        slider_container = QWidget()
        slider_layout = QHBoxLayout(slider_container)
        slider_layout.setContentsMargins(0, 0, 0, 0)
        slider_layout.setSpacing(15)
        
        slider_layout.addWidget(volume_slider)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        volume_value = QLabel("80%")
        volume_value.setStyleSheet(f"""
            QLabel {{
                color: {LIGHT_PURPLE.name()};
                font-size: 14px;
                font-weight: bold;
                background-color: {DARK_BG.name()};
                border: 1px solid {PURPLE_PRIMARY.name()};
                border-radius: 5px;
                padding: 8px 12px;
                min-width: 50px;
            }}
        """)
        volume_value.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        slider_layout.addWidget(volume_value)
        slider_layout.addStretch()  # –ß—Ç–æ–±—ã –ø—Ä–∏–∂–∞–ª–æ—Å—å –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        volume_slider.valueChanged.connect(lambda v: volume_value.setText(f"{v}%"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º—É - –ø–æ–ª–∑—É–Ω–æ–∫ –±—É–¥–µ—Ç –≤—ã—Ä–æ–≤–Ω–µ–Ω —Å –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        layout.addRow("üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å:", slider_container)
        
        widget.setLayout(layout)
        return widget
        
    def apply_settings(self):
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        
    def reset_settings(self):
        reply = QMessageBox.question(self, "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                                   "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?")
        if reply == QMessageBox.StandardButton.Yes:
            QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
            
    def keyPressEvent(self, a0: QKeyEvent | None):
        if a0 is not None and a0.key() == Qt.Key.Key_Escape:
            self.exitToMenu.emit()
        else:
            super().keyPressEvent(a0)

class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle(f"Black Empire v{GAME_VERSION}")
        self.setGeometry(100, 100, SCREEN_WIDTH, SCREEN_HEIGHT)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        self.central_widget = GradientWidget()
        self.setCentralWidget(self.central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)
        
        # –°—Ç–µ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
        self.content_stack = QStackedWidget()
        self.content_stack.setStyleSheet(f"background: transparent;")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω—ã
        self.loading_screen = LoadingScreen()
        self.main_menu = MainMenuScreen()
        self.clicker_game = ClickerGame()
        self.investment_menu = InvestmentMenu()
        self.shop_selection = ShopSelectionMenu()
        self.light_shop = LightShopMenu()
        self.business_menu = BusinessMenu()
        self.profile_menu = ProfileMenu()
        self.settings_menu = SettingsMenu()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω—ã –≤ —Å—Ç–µ–∫
        self.content_stack.addWidget(self.loading_screen)        # 0
        self.content_stack.addWidget(self.main_menu)             # 1
        self.content_stack.addWidget(self.clicker_game)          # 2
        self.content_stack.addWidget(self.investment_menu)       # 3
        self.content_stack.addWidget(self.shop_selection)        # 4
        self.content_stack.addWidget(self.light_shop)            # 5
        self.content_stack.addWidget(self.business_menu)         # 6
        self.content_stack.addWidget(self.profile_menu)          # 7
        self.content_stack.addWidget(self.settings_menu)         # 8
        
        main_layout.addWidget(self.content_stack)
        self.central_widget.setLayout(main_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.loading_screen.loadingFinished.connect(self.show_main_menu)
        self.main_menu.playClicked.connect(self.show_clicker_game)
        self.main_menu.settingsClicked.connect(self.show_settings)
        self.main_menu.exitClicked.connect(self.close)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
        self.clicker_game.exitToMenu.connect(self.show_main_menu)
        self.investment_menu.exitToClicker.connect(self.show_clicker_game)
        self.shop_selection.exitToClicker.connect(self.show_clicker_game)
        self.light_shop.exitToShopSelectionMenu.connect(self.show_shop_selection)
        self.business_menu.exitToClicker.connect(self.show_clicker_game)
        self.profile_menu.exitToClicker.connect(self.show_clicker_game)
        self.settings_menu.exitToMenu.connect(self.show_main_menu)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
        self.shop_selection.shopSelected.connect(self.handle_shop_selection)

        self.clicker_game.navigationRequested.connect(self.handle_navigation)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        self.content_stack.setCurrentIndex(0)

    def handle_navigation(self, destination):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –∫–ª–∏–∫–µ—Ä–∞"""
        if destination == "main_menu":
            self.show_main_menu()
        elif destination == "shops":
            self.show_shop_selection()
        elif destination == "investments":
            self.show_investments()
        elif destination == "businesses":
            self.show_businesses()
        elif destination == "profile":
            self.show_profile()
        
    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.content_stack.setCurrentIndex(1)
        
    def show_clicker_game(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –∫–ª–∏–∫–µ—Ä"""
        self.content_stack.setCurrentIndex(2)
        
    def show_investments(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
        self.content_stack.setCurrentIndex(3)
        
    def show_shop_selection(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞"""
        self.content_stack.setCurrentIndex(4)
        
    def show_businesses(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–∑–Ω–µ—Å—ã"""
        self.content_stack.setCurrentIndex(6)
        
    def show_profile(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        self.content_stack.setCurrentIndex(7)
        
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.content_stack.setCurrentIndex(8)
        
    def handle_shop_selection(self, shop_type):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞"""
        if shop_type == "legal":
            self.content_stack.setCurrentIndex(5)  # Light shop
        elif shop_type == "black_market":
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫
            QMessageBox.information(self, "–ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫", "–ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        
    def keyPressEvent(self, a0: QKeyEvent | None):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à"""
        if a0 is not None and a0.key() == Qt.Key.Key_Escape:
            # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–µ–≥–æ
            current_index = self.content_stack.currentIndex()
            if current_index != 1:  # –ù–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                self.show_main_menu()
        else:
            super().keyPressEvent(a0)

def main():
    def qt_debug_handler(msg_type, context, message):
        if "QLayout::addChildLayout" in message:
            import traceback
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ QLayout:", message)
            traceback.print_stack(limit=6)
        else:
            print(message)

    qInstallMessageHandler(qt_debug_handler)
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle("Fusion")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ª–∏—Ç—Ä—ã
    palette = QPalette()
    palette.setColor(QPalette.ColorRole.Window, DARK_BG)
    palette.setColor(QPalette.ColorRole.WindowText, TEXT_PRIMARY)
    palette.setColor(QPalette.ColorRole.Base, PANEL_BG)
    palette.setColor(QPalette.ColorRole.AlternateBase, DEEP_PURPLE)
    palette.setColor(QPalette.ColorRole.ToolTipBase, WHITE)
    palette.setColor(QPalette.ColorRole.ToolTipText, WHITE)
    palette.setColor(QPalette.ColorRole.Text, TEXT_PRIMARY)
    palette.setColor(QPalette.ColorRole.Button, PURPLE_PRIMARY)
    palette.setColor(QPalette.ColorRole.ButtonText, TEXT_PRIMARY)
    palette.setColor(QPalette.ColorRole.BrightText, ACCENT2)
    palette.setColor(QPalette.ColorRole.Highlight, PURPLE_ACCENT)
    palette.setColor(QPalette.ColorRole.HighlightedText, BLACK)
    app.setPalette(palette)
    
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec())

if __name__ == '__main__':
    main()