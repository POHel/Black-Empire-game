import sys
import random
import math
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QLabel, QPushButton, QFrame)
from PyQt6.QtCore import Qt, QTimer, QPropertyAnimation, QRect, pyqtProperty
from PyQt6.QtGui import QPainter, QColor, QPalette, QKeyEvent, QFont


class FloatingText(QLabel):
    def __init__(self, text, color, parent=None):
        super().__init__(text, parent)
        self.color = color
        self.setStyleSheet(f"""
            color: {color}; 
            font-weight: 700; 
            font-size: 20px; 
            background: transparent;
            padding: 4px 12px;
            border-radius: 12px;
            background-color: rgba(255,255,255,0.1);
        """)
        self.setAttribute(Qt.WidgetAttribute.WA_TransparentForMouseEvents)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        self.pos_animation = QPropertyAnimation(self, b"geometry")
        self.pos_animation.setDuration(1000)
        self.opacity_animation = QPropertyAnimation(self, b"windowOpacity")
        self.opacity_animation.setDuration(1000)
        self.opacity_animation.setStartValue(1.0)
        self.opacity_animation.setEndValue(0.0)
        
        self.pos_animation.finished.connect(self.deleteLater)
        
    def start_animation(self, start_pos):
        start_x, start_y = start_pos
        end_rect = QRect(start_x, start_y - 100, self.width(), self.height())
        
        self.pos_animation.setStartValue(self.geometry())
        self.pos_animation.setEndValue(end_rect)
        
        self.pos_animation.start()
        self.opacity_animation.start()


class Particle(QWidget):
    def __init__(self, color, parent=None):
        super().__init__(parent)
        self.color = color
        size = random.randint(4, 8)
        self.setFixedSize(size, size)
        self.setAttribute(Qt.WidgetAttribute.WA_TransparentForMouseEvents)
        
        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setDuration(800)
        self.opacity_animation = QPropertyAnimation(self, b"windowOpacity")
        self.opacity_animation.setDuration(800)
        self.opacity_animation.setStartValue(1.0)
        self.opacity_animation.setEndValue(0.0)
        
        self.animation.finished.connect(self.deleteLater)
        
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        painter.setBrush(QColor(*self.color))
        painter.setPen(Qt.PenStyle.NoPen)
        painter.drawEllipse(0, 0, self.width(), self.height())
        
    def start_animation(self, start_pos, angle, distance):
        start_x, start_y = start_pos
        end_x = start_x + math.cos(angle) * distance
        end_y = start_y + math.sin(angle) * distance
        
        end_geometry = QRect(int(end_x), int(end_y), self.width(), self.height())
        
        self.animation.setStartValue(self.geometry())
        self.animation.setEndValue(end_geometry)
        
        self.animation.start()
        self.opacity_animation.start()


class AnimatedButton(QPushButton):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._scale = 1.0
        
    def get_scale(self):
        return self._scale
        
    def set_scale(self, value):
        self._scale = value
        self.update()
        
    scale = pyqtProperty(float, get_scale, set_scale)
        
    def mousePressEvent(self, event):
        # –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        self.animation = QPropertyAnimation(self, b"scale")
        self.animation.setDuration(150)
        self.animation.setStartValue(1.0)
        self.animation.setEndValue(0.98)
        self.animation.start()
        super().mousePressEvent(event)
        
    def mouseReleaseEvent(self, event):
        self.animation = QPropertyAnimation(self, b"scale")
        self.animation.setDuration(150)
        self.animation.setStartValue(0.98)
        self.animation.setEndValue(1.0)
        self.animation.start()
        super().mouseReleaseEvent(event)


class ClickerGame(QMainWindow):
    def __init__(self):
        super().__init__()
        self.money = 0
        self.per_click = 1
        self.total_clicks = 0
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'bg': '#0f172a',
            'panel': '#1e293b',
            'card': '#334155',
            'primary': '#3b82f6',
            'primary_hover': '#2563eb',
            'success': '#10b981',
            'text_primary': '#f8fafc',
            'text_secondary': '#cbd5e1',
            'text_muted': '#64748b',
            'border': '#475569'
        }
        
        self.init_ui()
        
    def init_ui(self):
        self.setWindowTitle('Finance Clicker ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä')
        self.setFixedSize(1200, 800)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
        central_widget.setStyleSheet(f"background: {self.colors['bg']};")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(40, 40, 40, 40)
        layout.setSpacing(30)
        
        # –ü–∞–Ω–µ–ª—å –∏–≥—Ä—ã
        self.game_panel = QFrame()
        self.game_panel.setObjectName("gamePanel")
        self.game_panel.setStyleSheet(f"""
            QFrame#gamePanel {{
                background: {self.colors['panel']};
                border-radius: 20px;
                border: 1px solid {self.colors['border']};
            }}
        """)
        
        panel_layout = QVBoxLayout(self.game_panel)
        panel_layout.setContentsMargins(40, 40, 40, 40)
        panel_layout.setSpacing(30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QVBoxLayout()
        header_layout.setSpacing(8)
        
        self.title_label = QLabel("Finance Clicker")
        self.title_label.setStyleSheet(f"""
            color: {self.colors['text_primary']};
            font-weight: 700;
            font-size: 36px;
        """)
        self.title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        self.subtitle_label = QLabel("–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–º–ø–µ—Ä–∏—é")
        self.subtitle_label.setStyleSheet(f"""
            color: {self.colors['text_secondary']};
            font-weight: 400;
            font-size: 18px;
        """)
        self.subtitle_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        header_layout.addWidget(self.title_label)
        header_layout.addWidget(self.subtitle_label)
        panel_layout.addLayout(header_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QHBoxLayout()
        stats_layout.setSpacing(20)
        
        self.money_stat = self.create_stat_widget("üí∞ –ö–∞–ø–∏—Ç–∞–ª", "$0", self.colors['success'])
        self.per_click_stat = self.create_stat_widget("üìà –î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫", "$1", self.colors['primary'])
        self.total_clicks_stat = self.create_stat_widget("üëÜ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤", "0", self.colors['text_secondary'])
        
        stats_layout.addWidget(self.money_stat)
        stats_layout.addWidget(self.per_click_stat)
        stats_layout.addWidget(self.total_clicks_stat)
        panel_layout.addLayout(stats_layout)
        
        # –û–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞
        click_layout = QVBoxLayout()
        click_layout.setSpacing(25)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        self.click_button = AnimatedButton()
        self.click_button.setFixedHeight(300)
        self.click_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.click_button.setStyleSheet(f"""
            AnimatedButton {{
                background: {self.colors['primary']};
                border-radius: 20px;
                border: none;
                color: white;
                font-weight: 600;
                font-size: 18px;
            }}
            AnimatedButton:hover {{
                background: {self.colors['primary_hover']};
            }}
            AnimatedButton:pressed {{
                background: {self.colors['primary_hover']};
            }}
        """)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π layout –∫–Ω–æ–ø–∫–∏
        button_layout = QVBoxLayout(self.click_button)
        button_layout.setSpacing(15)
        button_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_icon = QLabel("üíº")
        button_icon.setStyleSheet("""
            font-size: 64px;
            background: transparent;
        """)
        button_icon.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        button_label = QLabel("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
        button_label.setStyleSheet("""
            color: white;
            font-weight: 600;
            font-size: 28px;
            background: transparent;
        """)
        button_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫
        gain_layout = QVBoxLayout()
        gain_layout.setSpacing(5)
        
        self.click_gain_label = QLabel("+$1")
        self.click_gain_label.setStyleSheet("""
            color: rgba(255,255,255,0.9);
            font-weight: 600;
            font-size: 20px;
            background: transparent;
        """)
        self.click_gain_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        click_subtitle = QLabel("–∑–∞ –∫–ª–∏–∫")
        click_subtitle.setStyleSheet(f"""
            color: rgba(255,255,255,0.7);
            font-size: 14px;
            background: transparent;
        """)
        click_subtitle.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        gain_layout.addWidget(self.click_gain_label)
        gain_layout.addWidget(click_subtitle)
        
        button_layout.addWidget(button_icon)
        button_layout.addWidget(button_label)
        button_layout.addLayout(gain_layout)
        
        click_layout.addWidget(self.click_button)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        self.progress_container = QWidget()
        self.progress_container.setStyleSheet("background: transparent;")
        progress_layout = QVBoxLayout(self.progress_container)
        progress_layout.setSpacing(8)
        
        progress_text = QLabel("–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:")
        progress_text.setStyleSheet(f"""
            color: {self.colors['text_secondary']};
            font-size: 14px;
            background: transparent;
        """)
        progress_text.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        self.progress_bar = QFrame()
        self.progress_bar.setFixedHeight(8)
        self.progress_bar.setStyleSheet(f"""
            QFrame {{
                background: {self.colors['card']};
                border-radius: 4px;
            }}
        """)
        
        self.progress_fill = QFrame(self.progress_bar)
        self.progress_fill.setFixedHeight(8)
        self.progress_fill.setStyleSheet(f"""
            QFrame {{
                background: {self.colors['success']};
                border-radius: 4px;
            }}
        """)
        self.update_progress_bar()
        
        progress_layout.addWidget(progress_text)
        progress_layout.addWidget(self.progress_bar)
        
        click_layout.addWidget(self.progress_container)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = QLabel("üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü—Ä–æ–±–µ–ª –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        instructions.setStyleSheet(f"""
            color: {self.colors['text_muted']};
            font-size: 14px;
            padding: 12px;
            background: {self.colors['card']};
            border-radius: 10px;
        """)
        instructions.setAlignment(Qt.AlignmentFlag.AlignCenter)
        instructions.setMaximumHeight(50)
        click_layout.addWidget(instructions)
        
        panel_layout.addLayout(click_layout)
        layout.addWidget(self.game_panel)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.click_button.clicked.connect(self.handle_click)
        
    def create_stat_widget(self, label, value, color):
        widget = QFrame()
        widget.setStyleSheet(f"""
            QFrame {{
                background: {self.colors['card']};
                border-radius: 15px;
                padding: 20px;
            }}
        """)
        
        layout = QVBoxLayout(widget)
        layout.setSpacing(8)
        
        value_label = QLabel(value)
        value_label.setStyleSheet(f"""
            color: {color};
            font-weight: 700;
            font-size: 24px;
        """)
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        label_label = QLabel(label)
        label_label.setStyleSheet(f"""
            color: {self.colors['text_secondary']};
            font-size: 14px;
        """)
        label_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        layout.addWidget(value_label)
        layout.addWidget(label_label)
        
        return widget
    
    def update_progress_bar(self):
        clicks_to_next = 50 - (self.total_clicks % 50)
        progress = (50 - clicks_to_next) / 50 * 100
        
        fill_width = int(self.progress_bar.width() * progress / 100)
        self.progress_fill.setFixedWidth(fill_width)
        self.progress_fill.move(0, 0)
    
    def format_number(self, n):
        if n >= 1000000:
            return f'${n/1000000:.1f}M'
        elif n >= 1000:
            return f'${n/1000:.1f}K'
        return f'${math.floor(n)}'
    
    def update_ui(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        money_widget = self.money_stat.layout()
        per_click_widget = self.per_click_stat.layout()
        total_clicks_widget = self.total_clicks_stat.layout()
        
        if money_widget and money_widget.itemAt(0):
            money_value = money_widget.itemAt(0).widget()
            if money_value:
                money_value.setText(self.format_number(self.money))
        
        if per_click_widget and per_click_widget.itemAt(0):
            per_click_value = per_click_widget.itemAt(0).widget()
            if per_click_value:
                per_click_value.setText(self.format_number(self.per_click))
        
        if total_clicks_widget and total_clicks_widget.itemAt(0):
            total_clicks_value = total_clicks_widget.itemAt(0).widget()
            if total_clicks_value:
                total_clicks_value.setText(str(self.total_clicks))
        
        self.click_gain_label.setText(f"+{self.format_number(self.per_click)}")
        self.update_progress_bar()
    
    def handle_click(self):
        self.money += self.per_click
        self.total_clicks += 1
        self.update_ui()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        button_center = self.click_button.rect().center()
        global_pos = self.click_button.mapToGlobal(button_center)
        self.create_floating_text((global_pos.x(), global_pos.y()), f"+{self.format_number(self.per_click)}", "#10b981")
        self.create_particles((global_pos.x(), global_pos.y()))
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–µ 50 –∫–ª–∏–∫–æ–≤
        if self.total_clicks % 50 == 0:
            self.per_click += 1
            self.update_ui()
            self.create_floating_text((global_pos.x(), global_pos.y()), "‚ú® –£—Ä–æ–≤–µ–Ω—å„Ç¢„ÉÉ„Éó!", "#f59e0b")
    
    def create_floating_text(self, position, text, color):
        floating = FloatingText(text, color, self)
        floating.move(int(position[0] - 60), int(position[1] - 20))
        floating.show()
        floating.start_animation((int(position[0] - 60), int(position[1] - 20)))
    
    def create_particles(self, position, count=12):
        for _ in range(count):
            angle = random.uniform(0, 2 * math.pi)
            distance = 40 + random.uniform(0, 60)
            
            # –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
            colors = [
                (59, 130, 246),  # primary blue
                (16, 185, 129),  # success green
                (245, 158, 11),  # amber
                (139, 92, 246),  # violet
            ]
            color = random.choice(colors)
            
            particle = Particle(color, self)
            particle.move(int(position[0] - 3), int(position[1] - 3))
            particle.show()
            particle.start_animation((position[0], position[1]), angle, distance)
    
    def keyPressEvent(self, event: QKeyEvent):
        if event.key() == Qt.Key.Key_Space:
            event.accept()
            self.handle_click()
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            self.click_button.setStyleSheet(f"""
                AnimatedButton {{
                    background: {self.colors['primary_hover']};
                    border-radius: 20px;
                    border: 2px solid rgba(255,255,255,0.3);
                    color: white;
                    font-weight: 600;
                    font-size: 18px;
                }}
            """)
            
            QTimer.singleShot(100, self.reset_button_style)
        else:
            super().keyPressEvent(event)
    
    def reset_button_style(self):
        self.click_button.setStyleSheet(f"""
            AnimatedButton {{
                background: {self.colors['primary']};
                border-radius: 20px;
                border: none;
                color: white;
                font-weight: 600;
                font-size: 18px;
            }}
            AnimatedButton:hover {{
                background: {self.colors['primary_hover']};
            }}
        """)


def main():
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    palette = QPalette()
    palette.setColor(QPalette.ColorRole.Window, QColor(15, 23, 42))
    palette.setColor(QPalette.ColorRole.WindowText, QColor(248, 250, 252))
    app.setPalette(palette)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
    font = QFont("Segoe UI", 10)
    app.setFont(font)
    
    game = ClickerGame()
    game.show()
    
    sys.exit(app.exec())


if __name__ == '__main__':
    main()